#
# Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
#
# Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
#
# Makefile for Linux/GCC
#

ifeq ($(QT_BIN_DIR),)
QT_BIN_DIR = /usr/bin
endif
ifeq ($(QT_INC_DIR),)
QT_INC_DIR = /usr/include/qt5
endif
ifeq ($(QT_LIB_DIR),)
QT_LIB_DIR = /usr/lib/x86_64-linux-gnu
endif

# Qt Framework modules
include mak/modules1.mak

# check if the module is present in the Qt Framework installation
include mak/modules2.mak

ifeq ($(HB_BIN_DIR),)
HB_BIN_DIR = /usr/local/bin
endif
ifeq ($(HB_INC_DIR),)
HB_INC_DIR = /usr/local/include/harbour
endif

QT5XHB_INC_DIR = include
#QT5XHB_OBJ_DIR = obj/$(QTPLATFORM)/$(QTCOMP)
QT5XHB_OBJ_DIR = obj
#QT5XHB_LIB_DIR = lib/$(QTPLATFORM)/$(QTCOMP)
QT5XHB_LIB_DIR = lib
QT5XHB_SRC_DIR = source

OBJEXT = .o
LIBEXT = .a
LIBPRE = lib

HB = $(HB_BIN_DIR)/harbour

# PRGFLAGS
PRGFLAGS = -n -w3 -gc3
ifeq ($(HBCOMP),xharbour)
   PRGFLAGS = -n -w2
endif

# PRGINCLUDES
PRGINCLUDES = -I$(QT5XHB_INC_DIR) -I$(HB_INC_DIR) 

CC = g++

# CFLAGS
CFLAGS =
# Qt 5.7.x require C++11
ifneq (,$(findstring 5.7,$(shell qmake -v)))
    CFLAGS += -std=c++11
endif
# Qt 5.8.x require C++11
ifneq (,$(findstring 5.8,$(shell qmake -v)))
    CFLAGS += -std=c++11
endif
# Qt 5.9.x require C++11
ifneq (,$(findstring 5.9,$(shell qmake -v)))
    CFLAGS += -std=c++11
endif
# Qt 5.10.x require C++11
ifneq (,$(findstring 5.10,$(shell qmake -v)))
    CFLAGS += -std=c++11
endif
# Qt 5.11.x require C++11
ifneq (,$(findstring 5.11,$(shell qmake -v)))
    CFLAGS += -std=c++11
endif
# Qt 5.12.x require C++11
ifneq (,$(findstring 5.12,$(shell qmake -v)))
    CFLAGS += -std=c++11
endif
# Qt 5.13.x require C++11
ifneq (,$(findstring 5.13,$(shell qmake -v)))
    CFLAGS += -std=c++11
endif
# Qt 5.14.x require C++11
ifneq (,$(findstring 5.14,$(shell qmake -v)))
    CFLAGS += -std=c++11
endif
# Qt 5.15.x require C++11
ifneq (,$(findstring 5.15,$(shell qmake -v)))
    CFLAGS += -std=c++11
endif
CFLAGS += -c -O2 -frtti -fexceptions -Wall -DUNICODE -fPIC
CFLAGS += -DQT_DLL
CFLAGS += -DQT_NO_DEBUG
CFLAGS += -DQT_THREAD_SUPPORT
# ative a linha abaixo para compilar sem checagem de parametros
# CFLAGS += -DQT5XHB_DONT_CHECK_PARAMETERS
include mak/modules3.mak

# CINCLUDES
CINCLUDES =
CINCLUDES += -I$(QT_INC_DIR)
ifneq ($(wildcard $(QT_INC_DIR)/QtANGLE/.*),)
   CINCLUDES += -I$(QT_INC_DIR)/QtANGLE
endif
include mak/modules4.mak
CINCLUDES += -I$(QT5XHB_INC_DIR)
CINCLUDES += -I$(QT5XHB_SRC_DIR)
CINCLUDES += -I$(HB_INC_DIR)

LINK = ar
LFLAGS = rc

MOC = $(QT_BIN_DIR)/moc

MOCFLAGS =
MOCFLAGS += -DQT_NO_DEBUG
include mak/modules5.mak

MOCINCLUDES =
MOCINCLUDES += -I$(QT_INC_DIR)
include mak/modules6.mak

# include mak/*.mak
include mak/modules7.mak

OBJECTS_QTCORE += $(QT5XHB_OBJ_DIR)/events$(OBJEXT)
OBJECTS_QTCORE += $(QT5XHB_OBJ_DIR)/signals$(OBJEXT)
OBJECTS_QTCORE += $(QT5XHB_OBJ_DIR)/dummy$(OBJEXT)
OBJECTS_QTCORE += $(QT5XHB_OBJ_DIR)/version$(OBJEXT)
OBJECTS_QTCORE += $(QT5XHB_OBJ_DIR)/utils$(OBJEXT)
OBJECTS_QTCORE += $(QT5XHB_OBJ_DIR)/qtdefs$(OBJEXT)

# ALLLIBS
ALLLIBS =
include mak/modules8.mak

all: $(ALLLIBS)

LINK_CMD = $(LINK) $(LFLAGS) $@ $^
HB_CMD = $(HB) $(PRGFLAGS) $(PRGINCLUDES) -o$@ $^
CC_CMD = $(CC) $(CFLAGS) $(CINCLUDES) -o $@ $^

include mak/rules1.mak
include mak/rules2.mak

# include mak/*Mocs.mak
include mak/modules9.mak
