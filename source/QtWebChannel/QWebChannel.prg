//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

// clang-format off

#include "hbclass.ch"

#ifndef QT5XHB_NO_REQUESTS
#endif

CLASS QWebChannel INHERIT QObject

   METHOD new
   METHOD delete
   METHOD registerObject
   METHOD deregisterObject
   METHOD blockUpdates
   METHOD setBlockUpdates
   METHOD connectTo
   METHOD disconnectFrom

   METHOD onBlockUpdatesChanged

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QWebChannel
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

// clang-format on

#pragma BEGINDUMP

#include <QtCore/Qt>

#ifndef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5, 4, 0))
#include <QtWebChannel/QWebChannel>
#endif
#endif

#include "qt5xhb_common.hpp"
#include "qt5xhb_macros.hpp"
#include "qt5xhb_utils.hpp"
#include "qt5xhb_events.hpp"
#include "qt5xhb_signals.hpp"

#ifdef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5, 4, 0))
#include <QtWebChannel/QWebChannel>
#endif
#endif

    /*
    QWebChannel( QObject * parent = 0 )
    */
HB_FUNC_STATIC(QWEBCHANNEL_NEW)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 4, 0))
  if (ISBETWEEN(0, 1) && (ISQOBJECT(1) || HB_ISNIL(1)))
  {
    QWebChannel *obj = new QWebChannel(OPQOBJECT(1, 0));
    Qt5xHb::returnNewObject(obj, false);
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
#endif
}

HB_FUNC_STATIC(QWEBCHANNEL_DELETE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 4, 0))
  QWebChannel *obj = (QWebChannel *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
    Qt5xHb::Events_disconnect_all_events(obj, true);
    Qt5xHb::Signals_disconnect_all_signals(obj, true);
    delete obj;
    obj = NULL;
    PHB_ITEM ptr = hb_itemPutPtr(NULL, NULL);
    hb_objSendMsg(hb_stackSelfItem(), "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
Q_INVOKABLE void registerObject( const QString &id, QObject * object )
*/
HB_FUNC_STATIC(QWEBCHANNEL_REGISTEROBJECT)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 4, 0))
  QWebChannel *obj = (QWebChannel *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(2) && HB_ISCHAR(1) && ISQOBJECT(2))
    {
#endif
      obj->registerObject(PQSTRING(1), PQOBJECT(2));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
Q_INVOKABLE void deregisterObject( QObject * object )
*/
HB_FUNC_STATIC(QWEBCHANNEL_DEREGISTEROBJECT)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 4, 0))
  QWebChannel *obj = (QWebChannel *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQOBJECT(1))
    {
#endif
      obj->deregisterObject(PQOBJECT(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
bool blockUpdates() const
*/
HB_FUNC_STATIC(QWEBCHANNEL_BLOCKUPDATES)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 4, 0))
  QWebChannel *obj = (QWebChannel *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RBOOL(obj->blockUpdates());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setBlockUpdates( bool block )
*/
HB_FUNC_STATIC(QWEBCHANNEL_SETBLOCKUPDATES)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 4, 0))
  QWebChannel *obj = (QWebChannel *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISLOG(1))
    {
#endif
      obj->setBlockUpdates(PBOOL(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
void connectTo( QWebChannelAbstractTransport * transport )
*/
HB_FUNC_STATIC(QWEBCHANNEL_CONNECTTO)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 4, 0))
  QWebChannel *obj = (QWebChannel *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQWEBCHANNELABSTRACTTRANSPORT(1))
    {
#endif
      obj->connectTo(PQWEBCHANNELABSTRACTTRANSPORT(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
void disconnectFrom( QWebChannelAbstractTransport * transport )
*/
HB_FUNC_STATIC(QWEBCHANNEL_DISCONNECTFROM)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 4, 0))
  QWebChannel *obj = (QWebChannel *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQWEBCHANNELABSTRACTTRANSPORT(1))
    {
#endif
      obj->disconnectFrom(PQWEBCHANNELABSTRACTTRANSPORT(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

void QWebChannelSlots_connect_signal(const QString &signal, const QString &slot);

HB_FUNC_STATIC(QWEBCHANNEL_ONBLOCKUPDATESCHANGED)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 4, 0))
  QWebChannelSlots_connect_signal("blockUpdatesChanged(bool)", "blockUpdatesChanged(bool)");
#else
  hb_retl(false);
#endif
}

#pragma ENDDUMP
