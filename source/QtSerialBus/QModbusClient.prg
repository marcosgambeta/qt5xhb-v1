//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

// clang-format off

#include <hbclass.ch>

#ifndef QT5XHB_NO_REQUESTS
#endif

CLASS QModbusClient INHERIT QModbusDevice

   METHOD new
   METHOD delete
   METHOD timeout
   METHOD setTimeout
   METHOD numberOfRetries
   METHOD setNumberOfRetries

   METHOD onTimeoutChanged

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QModbusClient
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

// clang-format on

#pragma BEGINDUMP

#include <QtCore/Qt>

#ifndef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
#include <QtSerialBus/QModbusClient>
#endif
#endif

#include "qt5xhb_common.hpp"
#include "qt5xhb_macros.hpp"
#include "qt5xhb_utils.hpp"
#include "qt5xhb_events.hpp"
#include "qt5xhb_signals.hpp"

#ifdef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
#include <QtSerialBus/QModbusClient>
#endif
#endif

    /*
    QModbusClient( QObject * parent = nullptr )
    */
HB_FUNC_STATIC(QMODBUSCLIENT_NEW)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
  if (ISBETWEEN(0, 1) && (ISQOBJECT(1) || HB_ISNIL(1)))
  {
    QModbusClient *obj = new QModbusClient(OPQOBJECT(1, nullptr));
    Qt5xHb::returnNewObject(obj, false);
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
#endif
}

/*
~QModbusClient()
*/
HB_FUNC_STATIC(QMODBUSCLIENT_DELETE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
  QModbusClient *obj = (QModbusClient *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
    Qt5xHb::Events_disconnect_all_events(obj, true);
    Qt5xHb::Signals_disconnect_all_signals(obj, true);
    delete obj;
    obj = NULL;
    PHB_ITEM ptr = hb_itemPutPtr(NULL, NULL);
    hb_objSendMsg(hb_stackSelfItem(), "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
int timeout() const
*/
HB_FUNC_STATIC(QMODBUSCLIENT_TIMEOUT)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
  QModbusClient *obj = (QModbusClient *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RINT(obj->timeout());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setTimeout( int newTimeout )
*/
HB_FUNC_STATIC(QMODBUSCLIENT_SETTIMEOUT)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
  QModbusClient *obj = (QModbusClient *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      obj->setTimeout(PINT(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
int numberOfRetries() const
*/
HB_FUNC_STATIC(QMODBUSCLIENT_NUMBEROFRETRIES)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
  QModbusClient *obj = (QModbusClient *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RINT(obj->numberOfRetries());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setNumberOfRetries( int number )
*/
HB_FUNC_STATIC(QMODBUSCLIENT_SETNUMBEROFRETRIES)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
  QModbusClient *obj = (QModbusClient *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      obj->setNumberOfRetries(PINT(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

void QModbusClientSlots_connect_signal(const QString &signal, const QString &slot);

HB_FUNC_STATIC(QMODBUSCLIENT_ONTIMEOUTCHANGED)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
  QModbusClientSlots_connect_signal("timeoutChanged(int)", "timeoutChanged(int)");
#else
  hb_retl(false);
#endif
}

#pragma ENDDUMP
