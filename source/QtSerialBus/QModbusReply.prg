//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

// clang-format off

#include <hbclass.ch>

#ifndef QT5XHB_NO_REQUESTS
#endif

CLASS QModbusReply INHERIT QObject

   METHOD new
   METHOD type
   METHOD serverAddress
   METHOD isFinished
   METHOD errorString
   METHOD error
   METHOD setFinished
   METHOD setError

   METHOD onFinished
   METHOD onErrorOccurred

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QModbusReply
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

// clang-format on

#pragma BEGINDUMP

#include <QtCore/Qt>

#ifndef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
#include <QtSerialBus/QModbusReply>
#endif
#endif

#include "qt5xhb_common.hpp"
#include "qt5xhb_macros.hpp"
#include "qt5xhb_utils.hpp"
#include "qt5xhb_events.hpp"
#include "qt5xhb_signals.hpp"

#ifdef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
#include <QtSerialBus/QModbusReply>
#endif
#endif

    /*
    QModbusReply( QModbusReply::ReplyType type, int serverAddress, QObject * parent = nullptr )
    */
HB_FUNC_STATIC(QMODBUSREPLY_NEW)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
  if (ISBETWEEN(2, 3) && HB_ISNUM(1) && HB_ISNUM(2) && (ISQOBJECT(3) || HB_ISNIL(3)))
  {
    QModbusReply *obj = new QModbusReply((QModbusReply::ReplyType)hb_parni(1), PINT(2), OPQOBJECT(3, nullptr));
    Qt5xHb::returnNewObject(obj, false);
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
#endif
}

/*
QModbusReply::ReplyType type() const
*/
HB_FUNC_STATIC(QMODBUSREPLY_TYPE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
  QModbusReply *obj = (QModbusReply *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RENUM(obj->type());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
int serverAddress() const
*/
HB_FUNC_STATIC(QMODBUSREPLY_SERVERADDRESS)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
  QModbusReply *obj = (QModbusReply *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RINT(obj->serverAddress());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
bool isFinished() const
*/
HB_FUNC_STATIC(QMODBUSREPLY_ISFINISHED)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
  QModbusReply *obj = (QModbusReply *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RBOOL(obj->isFinished());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
QString errorString() const
*/
HB_FUNC_STATIC(QMODBUSREPLY_ERRORSTRING)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
  QModbusReply *obj = (QModbusReply *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RQSTRING(obj->errorString());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
QModbusDevice::Error error() const
*/
HB_FUNC_STATIC(QMODBUSREPLY_ERROR)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
  QModbusReply *obj = (QModbusReply *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RENUM(obj->error());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setFinished( bool isFinished )
*/
HB_FUNC_STATIC(QMODBUSREPLY_SETFINISHED)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
  QModbusReply *obj = (QModbusReply *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISLOG(1))
    {
#endif
      obj->setFinished(PBOOL(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
void setError( QModbusDevice::Error error, const QString &errorText )
*/
HB_FUNC_STATIC(QMODBUSREPLY_SETERROR)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
  QModbusReply *obj = (QModbusReply *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(2) && HB_ISNUM(1) && HB_ISCHAR(2))
    {
#endif
      obj->setError((QModbusDevice::Error)hb_parni(1), PQSTRING(2));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

void QModbusReplySlots_connect_signal(const QString &signal, const QString &slot);

HB_FUNC_STATIC(QMODBUSREPLY_ONFINISHED)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
  QModbusReplySlots_connect_signal("finished()", "finished()");
#else
  hb_retl(false);
#endif
}

HB_FUNC_STATIC(QMODBUSREPLY_ONERROROCCURRED)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
  QModbusReplySlots_connect_signal("errorOccurred(QModbusDevice::Error)", "errorOccurred(QModbusDevice::Error)");
#else
  hb_retl(false);
#endif
}

#pragma ENDDUMP
