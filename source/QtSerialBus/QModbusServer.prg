//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

// clang-format off

#include <hbclass.ch>

#ifndef QT5XHB_NO_REQUESTS
REQUEST QVARIANT
#endif

CLASS QModbusServer INHERIT QModbusDevice

   METHOD new
   METHOD delete
   METHOD serverAddress
   METHOD setServerAddress
   METHOD processesBroadcast
   METHOD value
   METHOD setValue
   METHOD setData

   METHOD onDataWritten

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QModbusServer
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

// clang-format on

#pragma BEGINDUMP

#include <QtCore/Qt>

#ifndef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
#include <QtSerialBus/QModbusServer>
#endif
#endif

#include "qt5xhb_common.hpp"
#include "qt5xhb_macros.hpp"
#include "qt5xhb_utils.hpp"
#include "qt5xhb_events.hpp"
#include "qt5xhb_signals.hpp"

#ifdef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
#include <QtSerialBus/QModbusServer>
#endif
#endif

    /*
    QModbusServer( QObject * parent = nullptr )
    */
HB_FUNC_STATIC(QMODBUSSERVER_NEW)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
  if (ISBETWEEN(0, 1) && (ISQOBJECT(1) || HB_ISNIL(1)))
  {
    QModbusServer *obj = new QModbusServer(OPQOBJECT(1, nullptr));
    Qt5xHb::returnNewObject(obj, false);
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
#endif
}

/*
~QModbusServer()
*/
HB_FUNC_STATIC(QMODBUSSERVER_DELETE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
  QModbusServer *obj = (QModbusServer *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
    Qt5xHb::Events_disconnect_all_events(obj, true);
    Qt5xHb::Signals_disconnect_all_signals(obj, true);
    delete obj;
    obj = NULL;
    PHB_ITEM ptr = hb_itemPutPtr(NULL, NULL);
    hb_objSendMsg(hb_stackSelfItem(), "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
int serverAddress() const
*/
HB_FUNC_STATIC(QMODBUSSERVER_SERVERADDRESS)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
  QModbusServer *obj = (QModbusServer *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RINT(obj->serverAddress());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setServerAddress( int serverAddress )
*/
HB_FUNC_STATIC(QMODBUSSERVER_SETSERVERADDRESS)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
  QModbusServer *obj = (QModbusServer *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      obj->setServerAddress(PINT(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
virtual bool processesBroadcast() const
*/
HB_FUNC_STATIC(QMODBUSSERVER_PROCESSESBROADCAST)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
  QModbusServer *obj = (QModbusServer *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RBOOL(obj->processesBroadcast());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
virtual QVariant value( int option ) const
*/
HB_FUNC_STATIC(QMODBUSSERVER_VALUE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
  QModbusServer *obj = (QModbusServer *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      QVariant *ptr = new QVariant(obj->value(PINT(1)));
      Qt5xHb::createReturnClass(ptr, "QVARIANT", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
virtual bool setValue( int option, const QVariant &value )
*/
HB_FUNC_STATIC(QMODBUSSERVER_SETVALUE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
  QModbusServer *obj = (QModbusServer *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(2) && HB_ISNUM(1) && ISQVARIANT(2))
    {
#endif
      RBOOL(obj->setValue(PINT(1), *PQVARIANT(2)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
bool setData( QModbusDataUnit::RegisterType table, quint16 address, quint16 data )
*/
HB_FUNC_STATIC(QMODBUSSERVER_SETDATA)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
  QModbusServer *obj = (QModbusServer *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(3) && HB_ISNUM(1) && HB_ISNUM(2) && HB_ISNUM(3))
    {
#endif
      RBOOL(obj->setData((QModbusDataUnit::RegisterType)hb_parni(1), PQUINT16(2), PQUINT16(3)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

void QModbusServerSlots_connect_signal(const QString &signal, const QString &slot);

HB_FUNC_STATIC(QMODBUSSERVER_ONDATAWRITTEN)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 8, 0))
  QModbusServerSlots_connect_signal("dataWritten(QModbusDataUnit::RegisterType,int,int)",
                                    "dataWritten(QModbusDataUnit::RegisterType,int,int)");
#else
  hb_retl(false);
#endif
}

#pragma ENDDUMP
