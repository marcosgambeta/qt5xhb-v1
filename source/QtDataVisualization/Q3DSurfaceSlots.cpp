//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

#include "Q3DSurfaceSlots.hpp"

Q3DSurfaceSlots::Q3DSurfaceSlots(QObject *parent) : QObject(parent)
{
}

Q3DSurfaceSlots::~Q3DSurfaceSlots()
{
}

void Q3DSurfaceSlots::axisXChanged(QValue3DAxis *axis)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "axisXChanged(QValue3DAxis*)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "Q3DSURFACE");
    PHB_ITEM paxis = Qt5xHb::Signals_return_qobject(axis, "QVALUE3DAXIS");

    hb_vmEvalBlockV(cb, 2, psender, paxis);

    hb_itemRelease(psender);
    hb_itemRelease(paxis);
  }
}

void Q3DSurfaceSlots::axisYChanged(QValue3DAxis *axis)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "axisYChanged(QValue3DAxis*)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "Q3DSURFACE");
    PHB_ITEM paxis = Qt5xHb::Signals_return_qobject(axis, "QVALUE3DAXIS");

    hb_vmEvalBlockV(cb, 2, psender, paxis);

    hb_itemRelease(psender);
    hb_itemRelease(paxis);
  }
}

void Q3DSurfaceSlots::axisZChanged(QValue3DAxis *axis)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "axisZChanged(QValue3DAxis*)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "Q3DSURFACE");
    PHB_ITEM paxis = Qt5xHb::Signals_return_qobject(axis, "QVALUE3DAXIS");

    hb_vmEvalBlockV(cb, 2, psender, paxis);

    hb_itemRelease(psender);
    hb_itemRelease(paxis);
  }
}

void Q3DSurfaceSlots::flipHorizontalGridChanged(bool flip)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "flipHorizontalGridChanged(bool)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "Q3DSURFACE");
    PHB_ITEM pflip = hb_itemPutL(NULL, flip);

    hb_vmEvalBlockV(cb, 2, psender, pflip);

    hb_itemRelease(psender);
    hb_itemRelease(pflip);
  }
}

void Q3DSurfaceSlots::selectedSeriesChanged(QSurface3DSeries *series)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "selectedSeriesChanged(QSurface3DSeries*)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "Q3DSURFACE");
    PHB_ITEM pseries = Qt5xHb::Signals_return_qobject(series, "QSURFACE3DSERIES");

    hb_vmEvalBlockV(cb, 2, psender, pseries);

    hb_itemRelease(psender);
    hb_itemRelease(pseries);
  }
}

void Q3DSurfaceSlots_connect_signal(const QString &signal, const QString &slot)
{
  Q3DSurface *obj = (Q3DSurface *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
    Q3DSurfaceSlots *s = QCoreApplication::instance()->findChild<Q3DSurfaceSlots *>();

    if (s == NULL)
    {
      s = new Q3DSurfaceSlots();
      s->moveToThread(QCoreApplication::instance()->thread());
      s->setParent(QCoreApplication::instance());
    }

    hb_retl(Qt5xHb::Signals_connection_disconnection(s, signal, slot));
  }
  else
  {
    hb_retl(false);
  }
}
