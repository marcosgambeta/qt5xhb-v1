//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

// clang-format off

#include "hbclass.ch"

#ifndef QT5XHB_NO_REQUESTS
#endif

CLASS QLocalSocket INHERIT QIODevice

   METHOD new
   METHOD delete
   METHOD connectToServer
   METHOD disconnectFromServer
   METHOD setServerName
   METHOD serverName
   METHOD fullServerName
   METHOD abort
   METHOD isSequential
   METHOD bytesAvailable
   METHOD bytesToWrite
   METHOD canReadLine
   METHOD open
   METHOD close
   METHOD error
   METHOD flush
   METHOD isValid
   METHOD readBufferSize
   METHOD setReadBufferSize
   METHOD setSocketDescriptor
   METHOD socketDescriptor
   METHOD state
   METHOD waitForBytesWritten
   METHOD waitForConnected
   METHOD waitForDisconnected
   METHOD waitForReadyRead

   METHOD onConnected
   METHOD onDisconnected
   METHOD onError
   METHOD onStateChanged

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QLocalSocket
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

// clang-format on

#pragma BEGINDUMP

#include <QtCore/Qt>

#ifndef __XHARBOUR__
#include <QtNetwork/QLocalSocket>
#endif

#include "qt5xhb_common.hpp"
#include "qt5xhb_macros.hpp"
#include "qt5xhb_utils.hpp"
#include "qt5xhb_events.hpp"
#include "qt5xhb_signals.hpp"

#ifdef __XHARBOUR__
#include <QtNetwork/QLocalSocket>
#endif

    /*
    QLocalSocket( QObject * parent = nullptr )
    */
HB_FUNC_STATIC(QLOCALSOCKET_NEW)
{
  if (ISBETWEEN(0, 1) && (ISQOBJECT(1) || HB_ISNIL(1)))
  {
    QLocalSocket *obj = new QLocalSocket(OPQOBJECT(1, nullptr));
    Qt5xHb::returnNewObject(obj, false);
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

/*
~QLocalSocket()
*/
HB_FUNC_STATIC(QLOCALSOCKET_DELETE)
{
  QLocalSocket *obj = (QLocalSocket *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
    Qt5xHb::Events_disconnect_all_events(obj, true);
    Qt5xHb::Signals_disconnect_all_signals(obj, true);
    delete obj;
    obj = NULL;
    PHB_ITEM ptr = hb_itemPutPtr(NULL, NULL);
    hb_objSendMsg(hb_stackSelfItem(), "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
  }

  hb_itemReturn(hb_stackSelfItem());
}

HB_FUNC_STATIC(QLOCALSOCKET_CONNECTTOSERVER)
{
  if (ISBETWEEN(0, 1) && (HB_ISNUM(1) || HB_ISNIL(1)))
  {
    /*
    void connectToServer( QIODevice::OpenMode openMode = QIODevice::ReadWrite )
    */
    QLocalSocket *obj = (QLocalSocket *)Qt5xHb::itemGetPtrStackSelfItem();

    if (obj != NULL)
    {
      obj->connectToServer(HB_ISNIL(1) ? (QIODevice::OpenMode)QIODevice::ReadWrite : (QIODevice::OpenMode)hb_parni(1));
    }

    hb_itemReturn(hb_stackSelfItem());
  }
  else if (ISBETWEEN(1, 2) && HB_ISCHAR(1) && (HB_ISNUM(2) || HB_ISNIL(2)))
  {
    /*
    void connectToServer( const QString &name, QIODevice::OpenMode openMode = QIODevice::ReadWrite )
    */
    QLocalSocket *obj = (QLocalSocket *)Qt5xHb::itemGetPtrStackSelfItem();

    if (obj != NULL)
    {
      obj->connectToServer(PQSTRING(1),
                           HB_ISNIL(2) ? (QIODevice::OpenMode)QIODevice::ReadWrite : (QIODevice::OpenMode)hb_parni(2));
    }

    hb_itemReturn(hb_stackSelfItem());
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

/*
void disconnectFromServer()
*/
HB_FUNC_STATIC(QLOCALSOCKET_DISCONNECTFROMSERVER)
{
  QLocalSocket *obj = (QLocalSocket *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      obj->disconnectFromServer();
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
void setServerName( const QString &name )
*/
HB_FUNC_STATIC(QLOCALSOCKET_SETSERVERNAME)
{
  QLocalSocket *obj = (QLocalSocket *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISCHAR(1))
    {
#endif
      obj->setServerName(PQSTRING(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
QString serverName() const
*/
HB_FUNC_STATIC(QLOCALSOCKET_SERVERNAME)
{
  QLocalSocket *obj = (QLocalSocket *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RQSTRING(obj->serverName());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QString fullServerName() const
*/
HB_FUNC_STATIC(QLOCALSOCKET_FULLSERVERNAME)
{
  QLocalSocket *obj = (QLocalSocket *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RQSTRING(obj->fullServerName());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void abort()
*/
HB_FUNC_STATIC(QLOCALSOCKET_ABORT)
{
  QLocalSocket *obj = (QLocalSocket *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      obj->abort();
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
virtual bool isSequential() const Q_DECL_OVERRIDE
*/
HB_FUNC_STATIC(QLOCALSOCKET_ISSEQUENTIAL)
{
  QLocalSocket *obj = (QLocalSocket *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RBOOL(obj->isSequential());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
virtual qint64 bytesAvailable() const Q_DECL_OVERRIDE
*/
HB_FUNC_STATIC(QLOCALSOCKET_BYTESAVAILABLE)
{
  QLocalSocket *obj = (QLocalSocket *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RQINT64(obj->bytesAvailable());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
virtual qint64 bytesToWrite() const Q_DECL_OVERRIDE
*/
HB_FUNC_STATIC(QLOCALSOCKET_BYTESTOWRITE)
{
  QLocalSocket *obj = (QLocalSocket *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RQINT64(obj->bytesToWrite());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
virtual bool canReadLine() const Q_DECL_OVERRIDE
*/
HB_FUNC_STATIC(QLOCALSOCKET_CANREADLINE)
{
  QLocalSocket *obj = (QLocalSocket *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RBOOL(obj->canReadLine());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
virtual bool open( QIODevice::OpenMode openMode = QIODevice::ReadWrite ) Q_DECL_OVERRIDE
*/
HB_FUNC_STATIC(QLOCALSOCKET_OPEN)
{
  QLocalSocket *obj = (QLocalSocket *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(0, 1) && (HB_ISNUM(1) || HB_ISNIL(1)))
    {
#endif
      RBOOL(obj->open(HB_ISNIL(1) ? (QIODevice::OpenMode)QIODevice::ReadWrite : (QIODevice::OpenMode)hb_parni(1)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
virtual void close() Q_DECL_OVERRIDE
*/
HB_FUNC_STATIC(QLOCALSOCKET_CLOSE)
{
  QLocalSocket *obj = (QLocalSocket *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      obj->close();
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
QLocalSocket::LocalSocketError error() const
*/
HB_FUNC_STATIC(QLOCALSOCKET_ERROR)
{
  QLocalSocket *obj = (QLocalSocket *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RENUM(obj->error());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
bool flush()
*/
HB_FUNC_STATIC(QLOCALSOCKET_FLUSH)
{
  QLocalSocket *obj = (QLocalSocket *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RBOOL(obj->flush());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
bool isValid() const
*/
HB_FUNC_STATIC(QLOCALSOCKET_ISVALID)
{
  QLocalSocket *obj = (QLocalSocket *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RBOOL(obj->isValid());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
qint64 readBufferSize() const
*/
HB_FUNC_STATIC(QLOCALSOCKET_READBUFFERSIZE)
{
  QLocalSocket *obj = (QLocalSocket *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RQINT64(obj->readBufferSize());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void setReadBufferSize( qint64 size )
*/
HB_FUNC_STATIC(QLOCALSOCKET_SETREADBUFFERSIZE)
{
  QLocalSocket *obj = (QLocalSocket *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      obj->setReadBufferSize(PQINT64(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
bool setSocketDescriptor( qintptr socketDescriptor, QLocalSocket::LocalSocketState socketState =
QLocalSocket::ConnectedState, QIODevice::OpenMode openMode = QIODevice::ReadWrite )
*/
HB_FUNC_STATIC(QLOCALSOCKET_SETSOCKETDESCRIPTOR)
{
  QLocalSocket *obj = (QLocalSocket *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(1, 3) && HB_ISNUM(1) && (HB_ISNUM(2) || HB_ISNIL(2)) && (HB_ISNUM(3) || HB_ISNIL(3)))
    {
#endif
      RBOOL(obj->setSocketDescriptor(PQINTPTR(1),
                                     HB_ISNIL(2) ? (QLocalSocket::LocalSocketState)QLocalSocket::ConnectedState
                                                 : (QLocalSocket::LocalSocketState)hb_parni(2),
                                     HB_ISNIL(3) ? (QIODevice::OpenMode)QIODevice::ReadWrite
                                                 : (QIODevice::OpenMode)hb_parni(3)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
qintptr socketDescriptor() const
*/
HB_FUNC_STATIC(QLOCALSOCKET_SOCKETDESCRIPTOR)
{
  QLocalSocket *obj = (QLocalSocket *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RQINTPTR(obj->socketDescriptor());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QLocalSocket::LocalSocketState state() const
*/
HB_FUNC_STATIC(QLOCALSOCKET_STATE)
{
  QLocalSocket *obj = (QLocalSocket *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RENUM(obj->state());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
bool waitForBytesWritten( int msecs = 30000 ) Q_DECL_OVERRIDE
*/
HB_FUNC_STATIC(QLOCALSOCKET_WAITFORBYTESWRITTEN)
{
  QLocalSocket *obj = (QLocalSocket *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(0, 1) && (HB_ISNUM(1) || HB_ISNIL(1)))
    {
#endif
      RBOOL(obj->waitForBytesWritten(OPINT(1, 30000)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
bool waitForConnected( int msecs = 30000 )
*/
HB_FUNC_STATIC(QLOCALSOCKET_WAITFORCONNECTED)
{
  QLocalSocket *obj = (QLocalSocket *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(0, 1) && (HB_ISNUM(1) || HB_ISNIL(1)))
    {
#endif
      RBOOL(obj->waitForConnected(OPINT(1, 30000)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
bool waitForDisconnected( int msecs = 30000 )
*/
HB_FUNC_STATIC(QLOCALSOCKET_WAITFORDISCONNECTED)
{
  QLocalSocket *obj = (QLocalSocket *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(0, 1) && (HB_ISNUM(1) || HB_ISNIL(1)))
    {
#endif
      RBOOL(obj->waitForDisconnected(OPINT(1, 30000)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
bool waitForReadyRead( int msecs = 30000 ) Q_DECL_OVERRIDE
*/
HB_FUNC_STATIC(QLOCALSOCKET_WAITFORREADYREAD)
{
  QLocalSocket *obj = (QLocalSocket *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(0, 1) && (HB_ISNUM(1) || HB_ISNIL(1)))
    {
#endif
      RBOOL(obj->waitForReadyRead(OPINT(1, 30000)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

void QLocalSocketSlots_connect_signal(const QString &signal, const QString &slot);

HB_FUNC_STATIC(QLOCALSOCKET_ONCONNECTED)
{
  QLocalSocketSlots_connect_signal("connected()", "connected()");
}

HB_FUNC_STATIC(QLOCALSOCKET_ONDISCONNECTED)
{
  QLocalSocketSlots_connect_signal("disconnected()", "disconnected()");
}

HB_FUNC_STATIC(QLOCALSOCKET_ONERROR)
{
  QLocalSocketSlots_connect_signal("error(QLocalSocket::LocalSocketError)", "error(QLocalSocket::LocalSocketError)");
}

HB_FUNC_STATIC(QLOCALSOCKET_ONSTATECHANGED)
{
  QLocalSocketSlots_connect_signal("stateChanged(QLocalSocket::LocalSocketState)",
                                   "stateChanged(QLocalSocket::LocalSocketState)");
}

#pragma ENDDUMP
