//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

// clang-format off

#include "hbclass.ch"

#ifndef QT5XHB_NO_REQUESTS
#endif

CLASS QGeoCoordinate

   DATA pointer
   DATA self_destruction INIT .F.

   METHOD new
   METHOD delete
   METHOD isValid
   METHOD type
   METHOD setLatitude
   METHOD latitude
   METHOD setLongitude
   METHOD longitude
   METHOD setAltitude
   METHOD altitude
   METHOD distanceTo
   METHOD azimuthTo
   METHOD atDistanceAndAzimuth
   METHOD toString

   METHOD newFrom
   METHOD newFromObject
   METHOD newFromPointer
   METHOD selfDestruction
   METHOD setSelfDestruction

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QGeoCoordinate
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

// clang-format on

#pragma BEGINDUMP

#include <QtCore/Qt>

#ifndef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
#include <QtPositioning/QGeoCoordinate>
#endif
#endif

#include "qt5xhb_common.hpp"
#include "qt5xhb_macros.hpp"
#include "qt5xhb_utils.hpp"

#ifdef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
#include <QtPositioning/QGeoCoordinate>
#endif
#endif

HB_FUNC_STATIC(QGEOCOORDINATE_NEW)
{
  if (ISNUMPAR(0))
  {
    /*
    QGeoCoordinate()
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
    QGeoCoordinate *obj = new QGeoCoordinate();
    Qt5xHb::returnNewObject(obj, true);
#endif
  }
  else if (ISNUMPAR(2) && HB_ISNUM(1) && HB_ISNUM(2))
  {
    /*
    QGeoCoordinate( double latitude, double longitude )
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
    QGeoCoordinate *obj = new QGeoCoordinate(PDOUBLE(1), PDOUBLE(2));
    Qt5xHb::returnNewObject(obj, true);
#endif
  }
  else if (ISNUMPAR(3) && HB_ISNUM(1) && HB_ISNUM(2) && HB_ISNUM(3))
  {
    /*
    QGeoCoordinate( double latitude, double longitude, double altitude )
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
    QGeoCoordinate *obj = new QGeoCoordinate(PDOUBLE(1), PDOUBLE(2), PDOUBLE(3));
    Qt5xHb::returnNewObject(obj, true);
#endif
  }
  else if (ISNUMPAR(1) && ISQGEOCOORDINATE(1))
  {
    /*
    QGeoCoordinate( const QGeoCoordinate &other )
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
    QGeoCoordinate *obj = new QGeoCoordinate(*PQGEOCOORDINATE(1));
    Qt5xHb::returnNewObject(obj, true);
#endif
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

HB_FUNC_STATIC(QGEOCOORDINATE_DELETE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QGeoCoordinate *obj = (QGeoCoordinate *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
    delete obj;
    obj = NULL;
    PHB_ITEM ptr = hb_itemPutPtr(NULL, NULL);
    hb_objSendMsg(hb_stackSelfItem(), "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
bool isValid() const
*/
HB_FUNC_STATIC(QGEOCOORDINATE_ISVALID)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QGeoCoordinate *obj = (QGeoCoordinate *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RBOOL(obj->isValid());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
QGeoCoordinate::CoordinateType type() const
*/
HB_FUNC_STATIC(QGEOCOORDINATE_TYPE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QGeoCoordinate *obj = (QGeoCoordinate *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RENUM(obj->type());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setLatitude( double latitude )
*/
HB_FUNC_STATIC(QGEOCOORDINATE_SETLATITUDE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QGeoCoordinate *obj = (QGeoCoordinate *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      obj->setLatitude(PDOUBLE(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
double latitude() const
*/
HB_FUNC_STATIC(QGEOCOORDINATE_LATITUDE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QGeoCoordinate *obj = (QGeoCoordinate *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RDOUBLE(obj->latitude());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setLongitude( double longitude )
*/
HB_FUNC_STATIC(QGEOCOORDINATE_SETLONGITUDE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QGeoCoordinate *obj = (QGeoCoordinate *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      obj->setLongitude(PDOUBLE(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
double longitude() const
*/
HB_FUNC_STATIC(QGEOCOORDINATE_LONGITUDE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QGeoCoordinate *obj = (QGeoCoordinate *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RDOUBLE(obj->longitude());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setAltitude( double altitude )
*/
HB_FUNC_STATIC(QGEOCOORDINATE_SETALTITUDE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QGeoCoordinate *obj = (QGeoCoordinate *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      obj->setAltitude(PDOUBLE(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
double altitude() const
*/
HB_FUNC_STATIC(QGEOCOORDINATE_ALTITUDE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QGeoCoordinate *obj = (QGeoCoordinate *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RDOUBLE(obj->altitude());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
qreal distanceTo( const QGeoCoordinate &other ) const
*/
HB_FUNC_STATIC(QGEOCOORDINATE_DISTANCETO)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QGeoCoordinate *obj = (QGeoCoordinate *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQGEOCOORDINATE(1))
    {
#endif
      RQREAL(obj->distanceTo(*PQGEOCOORDINATE(1)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
qreal azimuthTo( const QGeoCoordinate &other ) const
*/
HB_FUNC_STATIC(QGEOCOORDINATE_AZIMUTHTO)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QGeoCoordinate *obj = (QGeoCoordinate *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQGEOCOORDINATE(1))
    {
#endif
      RQREAL(obj->azimuthTo(*PQGEOCOORDINATE(1)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
QGeoCoordinate atDistanceAndAzimuth( qreal distance, qreal azimuth, qreal distanceUp = 0.0 ) const
*/
HB_FUNC_STATIC(QGEOCOORDINATE_ATDISTANCEANDAZIMUTH)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QGeoCoordinate *obj = (QGeoCoordinate *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(2, 3) && HB_ISNUM(1) && HB_ISNUM(2) && (HB_ISNUM(3) || HB_ISNIL(3)))
    {
#endif
      QGeoCoordinate *ptr = new QGeoCoordinate(obj->atDistanceAndAzimuth(PQREAL(1), PQREAL(2), OPQREAL(3, 0.0)));
      Qt5xHb::createReturnClass(ptr, "QGEOCOORDINATE", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
QString toString( QGeoCoordinate::CoordinateFormat format = QGeoCoordinate::DegreesMinutesSecondsWithHemisphere ) const
*/
HB_FUNC_STATIC(QGEOCOORDINATE_TOSTRING)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QGeoCoordinate *obj = (QGeoCoordinate *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(0, 1) && (HB_ISNUM(1) || HB_ISNIL(1)))
    {
#endif
      RQSTRING(obj->toString(HB_ISNIL(1)
                                 ? (QGeoCoordinate::CoordinateFormat)QGeoCoordinate::DegreesMinutesSecondsWithHemisphere
                                 : (QGeoCoordinate::CoordinateFormat)hb_parni(1)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

HB_FUNC_STATIC(QGEOCOORDINATE_NEWFROM)
{
  PHB_ITEM self = hb_stackSelfItem();

  if (hb_pcount() == 1 && HB_ISOBJECT(1))
  {
    PHB_ITEM ptr = hb_itemPutPtr(NULL, hb_itemGetPtr(hb_objSendMsg(hb_param(1, HB_IT_OBJECT), "POINTER", 0)));
    hb_objSendMsg(self, "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
    PHB_ITEM des = hb_itemPutL(NULL, false);
    hb_objSendMsg(self, "_SELF_DESTRUCTION", 1, des);
    hb_itemRelease(des);
  }
  else if (hb_pcount() == 1 && HB_ISPOINTER(1))
  {
    PHB_ITEM ptr = hb_itemPutPtr(NULL, hb_itemGetPtr(hb_param(1, HB_IT_POINTER)));
    hb_objSendMsg(self, "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
    PHB_ITEM des = hb_itemPutL(NULL, false);
    hb_objSendMsg(self, "_SELF_DESTRUCTION", 1, des);
    hb_itemRelease(des);
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }

  hb_itemReturn(self);
}

HB_FUNC_STATIC(QGEOCOORDINATE_NEWFROMOBJECT)
{
  HB_FUNC_EXEC(QGEOCOORDINATE_NEWFROM);
}

HB_FUNC_STATIC(QGEOCOORDINATE_NEWFROMPOINTER)
{
  HB_FUNC_EXEC(QGEOCOORDINATE_NEWFROM);
}

HB_FUNC_STATIC(QGEOCOORDINATE_SELFDESTRUCTION)
{
  hb_retl(hb_itemGetL(hb_objSendMsg(hb_stackSelfItem(), "SELF_DESTRUCTION", 0)));
}

HB_FUNC_STATIC(QGEOCOORDINATE_SETSELFDESTRUCTION)
{
  PHB_ITEM self = hb_stackSelfItem();

  if (hb_pcount() == 1 && HB_ISLOG(1))
  {
    PHB_ITEM des = hb_itemPutL(NULL, hb_parl(1));
    hb_objSendMsg(self, "_SELF_DESTRUCTION", 1, des);
    hb_itemRelease(des);
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }

  hb_itemReturn(self);
}

#pragma ENDDUMP
