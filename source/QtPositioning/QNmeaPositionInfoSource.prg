//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

// clang-format off

#include <hbclass.ch>

#ifndef QT5XHB_NO_REQUESTS
REQUEST QGEOPOSITIONINFO
REQUEST QIODEVICE
#endif

CLASS QNmeaPositionInfoSource INHERIT QGeoPositionInfoSource

   METHOD new
   METHOD delete
   METHOD updateMode
   METHOD setDevice
   METHOD device
   METHOD setUpdateInterval
   METHOD lastKnownPosition
   METHOD supportedPositioningMethods
   METHOD minimumUpdateInterval
   METHOD error
   METHOD startUpdates
   METHOD stopUpdates
   METHOD requestUpdate

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QNmeaPositionInfoSource
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

// clang-format on

#pragma BEGINDUMP

#include <QtCore/Qt>

#ifndef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
#include <QtPositioning/QNmeaPositionInfoSource>
#endif
#endif

#include "qt5xhb_common.hpp"
#include "qt5xhb_macros.hpp"
#include "qt5xhb_utils.hpp"

#ifdef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
#include <QtPositioning/QNmeaPositionInfoSource>
#endif
#endif

#include <QtCore/QIODevice>

    /*
    QNmeaPositionInfoSource( QNmeaPositionInfoSource::UpdateMode updateMode, QObject * parent = 0 )
    */
HB_FUNC_STATIC(QNMEAPOSITIONINFOSOURCE_NEW)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  if (ISBETWEEN(1, 2) && HB_ISNUM(1) && (ISQOBJECT(2) || HB_ISNIL(2)))
  {
    QNmeaPositionInfoSource *obj =
        new QNmeaPositionInfoSource((QNmeaPositionInfoSource::UpdateMode)hb_parni(1), OPQOBJECT(2, 0));
    Qt5xHb::returnNewObject(obj, true);
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
#endif
}

HB_FUNC_STATIC(QNMEAPOSITIONINFOSOURCE_DELETE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QNmeaPositionInfoSource *obj = (QNmeaPositionInfoSource *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
    delete obj;
    obj = NULL;
    PHB_ITEM ptr = hb_itemPutPtr(NULL, NULL);
    hb_objSendMsg(hb_stackSelfItem(), "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QNmeaPositionInfoSource::UpdateMode updateMode() const
*/
HB_FUNC_STATIC(QNMEAPOSITIONINFOSOURCE_UPDATEMODE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QNmeaPositionInfoSource *obj = (QNmeaPositionInfoSource *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RENUM(obj->updateMode());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setDevice( QIODevice * source )
*/
HB_FUNC_STATIC(QNMEAPOSITIONINFOSOURCE_SETDEVICE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QNmeaPositionInfoSource *obj = (QNmeaPositionInfoSource *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQIODEVICE(1))
    {
#endif
      obj->setDevice(PQIODEVICE(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QIODevice * device() const
*/
HB_FUNC_STATIC(QNMEAPOSITIONINFOSOURCE_DEVICE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QNmeaPositionInfoSource *obj = (QNmeaPositionInfoSource *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QIODevice *ptr = obj->device();
      Qt5xHb::createReturnQObjectClass(ptr, "QIODEVICE");
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setUpdateInterval( int msec )
*/
HB_FUNC_STATIC(QNMEAPOSITIONINFOSOURCE_SETUPDATEINTERVAL)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QNmeaPositionInfoSource *obj = (QNmeaPositionInfoSource *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      obj->setUpdateInterval(PINT(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QGeoPositionInfo lastKnownPosition( bool fromSatellitePositioningMethodsOnly = false ) const
*/
HB_FUNC_STATIC(QNMEAPOSITIONINFOSOURCE_LASTKNOWNPOSITION)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QNmeaPositionInfoSource *obj = (QNmeaPositionInfoSource *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(0, 1) && (HB_ISLOG(1) || HB_ISNIL(1)))
    {
#endif
      QGeoPositionInfo *ptr = new QGeoPositionInfo(obj->lastKnownPosition(OPBOOL(1, false)));
      Qt5xHb::createReturnClass(ptr, "QGEOPOSITIONINFO", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
QGeoPositionInfoSource::PositioningMethods supportedPositioningMethods() const
*/
HB_FUNC_STATIC(QNMEAPOSITIONINFOSOURCE_SUPPORTEDPOSITIONINGMETHODS)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QNmeaPositionInfoSource *obj = (QNmeaPositionInfoSource *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RENUM(obj->supportedPositioningMethods());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
int minimumUpdateInterval() const
*/
HB_FUNC_STATIC(QNMEAPOSITIONINFOSOURCE_MINIMUMUPDATEINTERVAL)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QNmeaPositionInfoSource *obj = (QNmeaPositionInfoSource *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RINT(obj->minimumUpdateInterval());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
QGeoPositionInfoSource::Error error() const
*/
HB_FUNC_STATIC(QNMEAPOSITIONINFOSOURCE_ERROR)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QNmeaPositionInfoSource *obj = (QNmeaPositionInfoSource *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RENUM(obj->error());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void startUpdates()
*/
HB_FUNC_STATIC(QNMEAPOSITIONINFOSOURCE_STARTUPDATES)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QNmeaPositionInfoSource *obj = (QNmeaPositionInfoSource *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      obj->startUpdates();
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
void stopUpdates()
*/
HB_FUNC_STATIC(QNMEAPOSITIONINFOSOURCE_STOPUPDATES)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QNmeaPositionInfoSource *obj = (QNmeaPositionInfoSource *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      obj->stopUpdates();
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
void requestUpdate( int timeout = 0 )
*/
HB_FUNC_STATIC(QNMEAPOSITIONINFOSOURCE_REQUESTUPDATE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QNmeaPositionInfoSource *obj = (QNmeaPositionInfoSource *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(0, 1) && ISNUMORNIL(1))
    {
#endif
      obj->requestUpdate(OPINT(1, 0));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

#pragma ENDDUMP
