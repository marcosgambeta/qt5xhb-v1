//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

#include "QGeoAreaMonitorSourceSlots.hpp"

QGeoAreaMonitorSourceSlots::QGeoAreaMonitorSourceSlots(QObject *parent) : QObject(parent)
{
}

QGeoAreaMonitorSourceSlots::~QGeoAreaMonitorSourceSlots()
{
}

#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
void QGeoAreaMonitorSourceSlots::areaEntered(const QGeoAreaMonitorInfo &monitor, const QGeoPositionInfo &update)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "areaEntered(QGeoAreaMonitorInfo,QGeoPositionInfo)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QGEOAREAMONITORSOURCE");
    PHB_ITEM pmonitor = Qt5xHb::Signals_return_object((void *)&monitor, "QGEOAREAMONITORINFO");
    PHB_ITEM pupdate = Qt5xHb::Signals_return_object((void *)&update, "QGEOPOSITIONINFO");

    hb_vmEvalBlockV(cb, 3, psender, pmonitor, pupdate);

    hb_itemRelease(psender);
    hb_itemRelease(pmonitor);
    hb_itemRelease(pupdate);
  }
}
#endif

#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
void QGeoAreaMonitorSourceSlots::areaExited(const QGeoAreaMonitorInfo &monitor, const QGeoPositionInfo &update)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "areaExited(QGeoAreaMonitorInfo,QGeoPositionInfo)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QGEOAREAMONITORSOURCE");
    PHB_ITEM pmonitor = Qt5xHb::Signals_return_object((void *)&monitor, "QGEOAREAMONITORINFO");
    PHB_ITEM pupdate = Qt5xHb::Signals_return_object((void *)&update, "QGEOPOSITIONINFO");

    hb_vmEvalBlockV(cb, 3, psender, pmonitor, pupdate);

    hb_itemRelease(psender);
    hb_itemRelease(pmonitor);
    hb_itemRelease(pupdate);
  }
}
#endif

#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
void QGeoAreaMonitorSourceSlots::monitorExpired(const QGeoAreaMonitorInfo &monitor)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "monitorExpired(QGeoAreaMonitorInfo)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QGEOAREAMONITORSOURCE");
    PHB_ITEM pmonitor = Qt5xHb::Signals_return_object((void *)&monitor, "QGEOAREAMONITORINFO");

    hb_vmEvalBlockV(cb, 2, psender, pmonitor);

    hb_itemRelease(psender);
    hb_itemRelease(pmonitor);
  }
}
#endif

#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
void QGeoAreaMonitorSourceSlots::error(QGeoAreaMonitorSource::Error error)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "error(QGeoAreaMonitorSource::Error)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QGEOAREAMONITORSOURCE");
    PHB_ITEM perror = hb_itemPutNI(NULL, static_cast<int>(error));

    hb_vmEvalBlockV(cb, 2, psender, perror);

    hb_itemRelease(psender);
    hb_itemRelease(perror);
  }
}
#endif

void QGeoAreaMonitorSourceSlots_connect_signal(const QString &signal, const QString &slot)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QGeoAreaMonitorSource *obj = (QGeoAreaMonitorSource *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
    QGeoAreaMonitorSourceSlots *s = QCoreApplication::instance()->findChild<QGeoAreaMonitorSourceSlots *>();

    if (s == NULL)
    {
      s = new QGeoAreaMonitorSourceSlots();
      s->moveToThread(QCoreApplication::instance()->thread());
      s->setParent(QCoreApplication::instance());
    }

    hb_retl(Qt5xHb::Signals_connection_disconnection(s, signal, slot));
  }
  else
  {
    hb_retl(false);
  }
#else
  hb_retl(false);
#endif
}
