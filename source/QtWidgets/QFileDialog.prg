//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

// clang-format off

#include <hbclass.ch>

#ifndef QT5XHB_NO_REQUESTS
REQUEST QABSTRACTITEMDELEGATE
REQUEST QABSTRACTPROXYMODEL
REQUEST QBYTEARRAY
REQUEST QDIR
REQUEST QFILEICONPROVIDER
REQUEST QURL
#endif

CLASS QFileDialog INHERIT QDialog

   METHOD new
   METHOD delete
   METHOD acceptMode
   METHOD setAcceptMode
   METHOD confirmOverwrite
   METHOD setConfirmOverwrite
   METHOD defaultSuffix
   METHOD setDefaultSuffix
   METHOD fileMode
   METHOD setFileMode
   METHOD filter
   METHOD setFilter
   METHOD history
   METHOD setHistory
   METHOD iconProvider
   METHOD setIconProvider
   METHOD isNameFilterDetailsVisible
   METHOD setNameFilterDetailsVisible
   METHOD isReadOnly
   METHOD setReadOnly
   METHOD itemDelegate
   METHOD setItemDelegate
   METHOD labelText
   METHOD setLabelText
   METHOD nameFilters
   METHOD setNameFilters
   METHOD open
   METHOD options
   METHOD setOptions
   METHOD proxyModel
   METHOD setProxyModel
   METHOD resolveSymlinks
   METHOD setResolveSymlinks
   METHOD restoreState
   METHOD saveState
   METHOD selectFile
   METHOD selectNameFilter
   METHOD selectedFiles
   METHOD selectedNameFilter
   METHOD directory
   METHOD setDirectory
   METHOD setNameFilter
   METHOD setOption
   METHOD sidebarUrls
   METHOD setSidebarUrls
   METHOD testOption
   METHOD viewMode
   METHOD setViewMode
   METHOD setVisible
   METHOD directoryUrl
   METHOD setDirectoryUrl
   METHOD selectUrl
   METHOD selectedUrls
   METHOD mimeTypeFilters
   METHOD setMimeTypeFilters
   METHOD selectMimeTypeFilter
   METHOD getExistingDirectory
   METHOD getOpenFileName
   METHOD getOpenFileNames
   METHOD getSaveFileName
   METHOD getOpenFileUrl
   METHOD getSaveFileUrl
   METHOD getExistingDirectoryUrl
   METHOD getOpenFileUrls

   METHOD onCurrentChanged
   METHOD onDirectoryEntered
   METHOD onFileSelected
   METHOD onFilesSelected
   METHOD onFilterSelected
   METHOD onUrlSelected
   METHOD onUrlsSelected
   METHOD onCurrentUrlChanged
   METHOD onDirectoryUrlEntered

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QFileDialog
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

// clang-format on

#pragma BEGINDUMP

#include <QtCore/Qt>

#ifndef __XHARBOUR__
#include <QtWidgets/QFileDialog>
#endif

#include "qt5xhb_common.hpp"
#include "qt5xhb_macros.hpp"
#include "qt5xhb_utils.hpp"
#include "qt5xhb_events.hpp"
#include "qt5xhb_signals.hpp"

#ifdef __XHARBOUR__
#include <QtWidgets/QFileDialog>
#endif

#include <QtCore/QUrl>
#include <QtWidgets/QAbstractItemDelegate>
#include <QtCore/QAbstractProxyModel>

HB_FUNC_STATIC(QFILEDIALOG_NEW)
{
  if (ISNUMPAR(2) && ISQWIDGET(1) && HB_ISNUM(2)) {
    /*
    QFileDialog( QWidget * parent, Qt::WindowFlags flags )
    */
    QFileDialog *obj = new QFileDialog(PQWIDGET(1), (Qt::WindowFlags)hb_parni(2));
    Qt5xHb::returnNewObject(obj, false);
  } else if (ISBETWEEN(0, 4) && ISQWIDGETORNIL(1) && ISCHARORNIL(2) &&
           ISCHARORNIL(3) && ISCHARORNIL(4)) {
    /*
    QFileDialog( QWidget * parent = 0, const QString &caption = QString(), const QString &directory = QString(), const
    QString &filter = QString() )
    */
    QFileDialog *obj =
        new QFileDialog(OPQWIDGET(1, 0), OPQSTRING(2, QString()), OPQSTRING(3, QString()), OPQSTRING(4, QString()));
    Qt5xHb::returnNewObject(obj, false);
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

HB_FUNC_STATIC(QFILEDIALOG_DELETE)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
    Qt5xHb::Events_disconnect_all_events(obj, true);
    Qt5xHb::Signals_disconnect_all_signals(obj, true);
    delete obj;
    obj = NULL;
    PHB_ITEM ptr = hb_itemPutPtr(NULL, NULL);
    hb_objSendMsg(hb_stackSelfItem(), "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
QFileDialog::AcceptMode acceptMode() const
*/
HB_FUNC_STATIC(QFILEDIALOG_ACCEPTMODE)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RENUM(obj->acceptMode());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void setAcceptMode( QFileDialog::AcceptMode mode )
*/
HB_FUNC_STATIC(QFILEDIALOG_SETACCEPTMODE)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1)) {
#endif
      obj->setAcceptMode((QFileDialog::AcceptMode)hb_parni(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
bool confirmOverwrite() const
*/
HB_FUNC_STATIC(QFILEDIALOG_CONFIRMOVERWRITE)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->confirmOverwrite());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void setConfirmOverwrite( bool enabled )
*/
HB_FUNC_STATIC(QFILEDIALOG_SETCONFIRMOVERWRITE)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISLOG(1)) {
#endif
      obj->setConfirmOverwrite(PBOOL(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
QString defaultSuffix() const
*/
HB_FUNC_STATIC(QFILEDIALOG_DEFAULTSUFFIX)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RQSTRING(obj->defaultSuffix());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void setDefaultSuffix( const QString &suffix )
*/
HB_FUNC_STATIC(QFILEDIALOG_SETDEFAULTSUFFIX)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISCHAR(1)) {
#endif
      obj->setDefaultSuffix(PQSTRING(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
QFileDialog::FileMode fileMode() const
*/
HB_FUNC_STATIC(QFILEDIALOG_FILEMODE)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RENUM(obj->fileMode());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void setFileMode( QFileDialog::FileMode mode )
*/
HB_FUNC_STATIC(QFILEDIALOG_SETFILEMODE)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1)) {
#endif
      obj->setFileMode((QFileDialog::FileMode)hb_parni(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
QDir::Filters filter() const
*/
HB_FUNC_STATIC(QFILEDIALOG_FILTER)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RENUM(obj->filter());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void setFilter( QDir::Filters filters )
*/
HB_FUNC_STATIC(QFILEDIALOG_SETFILTER)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1)) {
#endif
      obj->setFilter((QDir::Filters)hb_parni(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
QStringList history() const
*/
HB_FUNC_STATIC(QFILEDIALOG_HISTORY)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RQSTRINGLIST(obj->history());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void setHistory( const QStringList &paths )
*/
HB_FUNC_STATIC(QFILEDIALOG_SETHISTORY)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISARRAY(1)) {
#endif
      obj->setHistory(PQSTRINGLIST(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
QFileIconProvider * iconProvider() const
*/
HB_FUNC_STATIC(QFILEDIALOG_ICONPROVIDER)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QFileIconProvider *ptr = obj->iconProvider();
      Qt5xHb::createReturnClass(ptr, "QFILEICONPROVIDER", false);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void setIconProvider( QFileIconProvider * provider )
*/
HB_FUNC_STATIC(QFILEDIALOG_SETICONPROVIDER)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQFILEICONPROVIDER(1)) {
#endif
      obj->setIconProvider(PQFILEICONPROVIDER(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
bool isNameFilterDetailsVisible() const
*/
HB_FUNC_STATIC(QFILEDIALOG_ISNAMEFILTERDETAILSVISIBLE)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->isNameFilterDetailsVisible());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void setNameFilterDetailsVisible( bool enabled )
*/
HB_FUNC_STATIC(QFILEDIALOG_SETNAMEFILTERDETAILSVISIBLE)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISLOG(1)) {
#endif
      obj->setNameFilterDetailsVisible(PBOOL(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
bool isReadOnly() const
*/
HB_FUNC_STATIC(QFILEDIALOG_ISREADONLY)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->isReadOnly());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void setReadOnly( bool enabled )
*/
HB_FUNC_STATIC(QFILEDIALOG_SETREADONLY)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISLOG(1)) {
#endif
      obj->setReadOnly(PBOOL(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
QAbstractItemDelegate * itemDelegate() const
*/
HB_FUNC_STATIC(QFILEDIALOG_ITEMDELEGATE)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QAbstractItemDelegate *ptr = obj->itemDelegate();
      Qt5xHb::createReturnQObjectClass(ptr, "QABSTRACTITEMDELEGATE");
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void setItemDelegate( QAbstractItemDelegate * delegate )
*/
HB_FUNC_STATIC(QFILEDIALOG_SETITEMDELEGATE)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQABSTRACTITEMDELEGATE(1)) {
#endif
      obj->setItemDelegate(PQABSTRACTITEMDELEGATE(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
QString labelText( QFileDialog::DialogLabel label ) const
*/
HB_FUNC_STATIC(QFILEDIALOG_LABELTEXT)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1)) {
#endif
      RQSTRING(obj->labelText((QFileDialog::DialogLabel)hb_parni(1)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void setLabelText( QFileDialog::DialogLabel label, const QString &text )
*/
HB_FUNC_STATIC(QFILEDIALOG_SETLABELTEXT)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(2) && HB_ISNUM(1) && HB_ISCHAR(2)) {
#endif
      obj->setLabelText((QFileDialog::DialogLabel)hb_parni(1), PQSTRING(2));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
QStringList nameFilters() const
*/
HB_FUNC_STATIC(QFILEDIALOG_NAMEFILTERS)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RQSTRINGLIST(obj->nameFilters());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void setNameFilters( const QStringList &filters )
*/
HB_FUNC_STATIC(QFILEDIALOG_SETNAMEFILTERS)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISARRAY(1)) {
#endif
      obj->setNameFilters(PQSTRINGLIST(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
void open( QObject * receiver, const char * member )
*/
HB_FUNC_STATIC(QFILEDIALOG_OPEN)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(2) && ISQOBJECT(1) && HB_ISCHAR(2)) {
#endif
      obj->open(PQOBJECT(1), PCONSTCHAR(2));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
QFileDialog::Options options() const
*/
HB_FUNC_STATIC(QFILEDIALOG_OPTIONS)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RENUM(obj->options());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void setOptions( QFileDialog::Options options )
*/
HB_FUNC_STATIC(QFILEDIALOG_SETOPTIONS)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1)) {
#endif
      obj->setOptions((QFileDialog::Options)hb_parni(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
QAbstractProxyModel * proxyModel() const
*/
HB_FUNC_STATIC(QFILEDIALOG_PROXYMODEL)
{
#ifndef QT_NO_PROXYMODEL
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QAbstractProxyModel *ptr = obj->proxyModel();
      Qt5xHb::createReturnQObjectClass(ptr, "QABSTRACTPROXYMODEL");
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setProxyModel( QAbstractProxyModel * proxyModel )
*/
HB_FUNC_STATIC(QFILEDIALOG_SETPROXYMODEL)
{
#ifndef QT_NO_PROXYMODEL
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQABSTRACTPROXYMODEL(1)) {
#endif
      obj->setProxyModel(PQABSTRACTPROXYMODEL(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
bool resolveSymlinks() const
*/
HB_FUNC_STATIC(QFILEDIALOG_RESOLVESYMLINKS)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->resolveSymlinks());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void setResolveSymlinks( bool enabled )
*/
HB_FUNC_STATIC(QFILEDIALOG_SETRESOLVESYMLINKS)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISLOG(1)) {
#endif
      obj->setResolveSymlinks(PBOOL(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
bool restoreState( const QByteArray &state )
*/
HB_FUNC_STATIC(QFILEDIALOG_RESTORESTATE)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQBYTEARRAY(1)) {
#endif
      RBOOL(obj->restoreState(*PQBYTEARRAY(1)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QByteArray saveState() const
*/
HB_FUNC_STATIC(QFILEDIALOG_SAVESTATE)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QByteArray *ptr = new QByteArray(obj->saveState());
      Qt5xHb::createReturnClass(ptr, "QBYTEARRAY", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void selectFile( const QString &filename )
*/
HB_FUNC_STATIC(QFILEDIALOG_SELECTFILE)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISCHAR(1)) {
#endif
      obj->selectFile(PQSTRING(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
void selectNameFilter( const QString &filter )
*/
HB_FUNC_STATIC(QFILEDIALOG_SELECTNAMEFILTER)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISCHAR(1)) {
#endif
      obj->selectNameFilter(PQSTRING(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
QStringList selectedFiles() const
*/
HB_FUNC_STATIC(QFILEDIALOG_SELECTEDFILES)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RQSTRINGLIST(obj->selectedFiles());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QString selectedNameFilter() const
*/
HB_FUNC_STATIC(QFILEDIALOG_SELECTEDNAMEFILTER)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RQSTRING(obj->selectedNameFilter());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QDir directory() const
*/
HB_FUNC_STATIC(QFILEDIALOG_DIRECTORY)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QDir *ptr = new QDir(obj->directory());
      Qt5xHb::createReturnClass(ptr, "QDIR", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

HB_FUNC_STATIC(QFILEDIALOG_SETDIRECTORY)
{
  if (ISNUMPAR(1) && HB_ISCHAR(1)) {
    /*
    void setDirectory( const QString &directory )
    */
    QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

    if (obj != NULL) {
      obj->setDirectory(PQSTRING(1));
    }

    hb_itemReturn(hb_stackSelfItem());
  } else if (ISNUMPAR(1) && ISQDIR(1)) {
    /*
    void setDirectory( const QDir &directory )
    */
    QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

    if (obj != NULL) {
      obj->setDirectory(*PQDIR(1));
    }

    hb_itemReturn(hb_stackSelfItem());
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

/*
void setNameFilter( const QString &filter )
*/
HB_FUNC_STATIC(QFILEDIALOG_SETNAMEFILTER)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISCHAR(1)) {
#endif
      obj->setNameFilter(PQSTRING(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
void setOption( QFileDialog::Option option, bool on = true )
*/
HB_FUNC_STATIC(QFILEDIALOG_SETOPTION)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(1, 2) && HB_ISNUM(1) && (HB_ISLOG(2) || HB_ISNIL(2))) {
#endif
      obj->setOption((QFileDialog::Option)hb_parni(1), OPBOOL(2, true));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
QList<QUrl> sidebarUrls() const
*/
HB_FUNC_STATIC(QFILEDIALOG_SIDEBARURLS)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QList<QUrl> list = obj->sidebarUrls();
      PHB_DYNS pDynSym = hb_dynsymFindName("QURL");
      PHB_ITEM pArray = hb_itemArrayNew(0);
      if (pDynSym != NULL) {
        for (int i = 0; i < list.count(); i++) {
          hb_vmPushDynSym(pDynSym);
          hb_vmPushNil();
          hb_vmDo(0);
          PHB_ITEM pObject = hb_itemNew(NULL);
          hb_itemCopy(pObject, hb_stackReturnItem());
          PHB_ITEM pItem = hb_itemPutPtr(NULL, new QUrl(list[i]));
          hb_objSendMsg(pObject, "_POINTER", 1, pItem);
          hb_itemRelease(pItem);
          PHB_ITEM pDestroy = hb_itemPutL(NULL, true);
          hb_objSendMsg(pObject, "_SELF_DESTRUCTION", 1, pDestroy);
          hb_itemRelease(pDestroy);
          hb_arrayAddForward(pArray, pObject);
          hb_itemRelease(pObject);
        }
      } else {
        hb_errRT_BASE(EG_NOFUNC, 1001, NULL, "QURL", HB_ERR_ARGS_BASEPARAMS);
      }
      hb_itemReturnRelease(pArray);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void setSidebarUrls( const QList<QUrl> &urls )
*/
HB_FUNC_STATIC(QFILEDIALOG_SETSIDEBARURLS)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISARRAY(1)) {
#endif
      QList<QUrl> par1;
      PHB_ITEM aList1 = hb_param(1, HB_IT_ARRAY);
      int nLen1 = hb_arrayLen(aList1);
      for (int i1 = 0; i1 < nLen1; i1++) {
        par1 << *(QUrl *)hb_itemGetPtr(hb_objSendMsg(hb_arrayGetItemPtr(aList1, i1 + 1), "POINTER", 0));
      }
      obj->setSidebarUrls(par1);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
bool testOption( QFileDialog::Option option ) const
*/
HB_FUNC_STATIC(QFILEDIALOG_TESTOPTION)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1)) {
#endif
      RBOOL(obj->testOption((QFileDialog::Option)hb_parni(1)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QFileDialog::ViewMode viewMode() const
*/
HB_FUNC_STATIC(QFILEDIALOG_VIEWMODE)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RENUM(obj->viewMode());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void setViewMode( QFileDialog::ViewMode mode )
*/
HB_FUNC_STATIC(QFILEDIALOG_SETVIEWMODE)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1)) {
#endif
      obj->setViewMode((QFileDialog::ViewMode)hb_parni(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
void setVisible( bool visible )
*/
HB_FUNC_STATIC(QFILEDIALOG_SETVISIBLE)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISLOG(1)) {
#endif
      obj->setVisible(PBOOL(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
QUrl directoryUrl() const
*/
HB_FUNC_STATIC(QFILEDIALOG_DIRECTORYURL)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QUrl *ptr = new QUrl(obj->directoryUrl());
      Qt5xHb::createReturnClass(ptr, "QURL", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void setDirectoryUrl( const QUrl &directory )
*/
HB_FUNC_STATIC(QFILEDIALOG_SETDIRECTORYURL)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQURL(1)) {
#endif
      obj->setDirectoryUrl(*PQURL(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
void selectUrl( const QUrl &url )
*/
HB_FUNC_STATIC(QFILEDIALOG_SELECTURL)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQURL(1)) {
#endif
      obj->selectUrl(*PQURL(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
QList<QUrl> selectedUrls() const
*/
HB_FUNC_STATIC(QFILEDIALOG_SELECTEDURLS)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QList<QUrl> list = obj->selectedUrls();
      PHB_DYNS pDynSym = hb_dynsymFindName("QURL");
      PHB_ITEM pArray = hb_itemArrayNew(0);
      if (pDynSym != NULL) {
        for (int i = 0; i < list.count(); i++) {
          hb_vmPushDynSym(pDynSym);
          hb_vmPushNil();
          hb_vmDo(0);
          PHB_ITEM pObject = hb_itemNew(NULL);
          hb_itemCopy(pObject, hb_stackReturnItem());
          PHB_ITEM pItem = hb_itemPutPtr(NULL, new QUrl(list[i]));
          hb_objSendMsg(pObject, "_POINTER", 1, pItem);
          hb_itemRelease(pItem);
          PHB_ITEM pDestroy = hb_itemPutL(NULL, true);
          hb_objSendMsg(pObject, "_SELF_DESTRUCTION", 1, pDestroy);
          hb_itemRelease(pDestroy);
          hb_arrayAddForward(pArray, pObject);
          hb_itemRelease(pObject);
        }
      } else {
        hb_errRT_BASE(EG_NOFUNC, 1001, NULL, "QURL", HB_ERR_ARGS_BASEPARAMS);
      }
      hb_itemReturnRelease(pArray);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QStringList mimeTypeFilters() const
*/
HB_FUNC_STATIC(QFILEDIALOG_MIMETYPEFILTERS)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RQSTRINGLIST(obj->mimeTypeFilters());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void setMimeTypeFilters( const QStringList &filters )
*/
HB_FUNC_STATIC(QFILEDIALOG_SETMIMETYPEFILTERS)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISARRAY(1)) {
#endif
      obj->setMimeTypeFilters(PQSTRINGLIST(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
void selectMimeTypeFilter( const QString &filter )
*/
HB_FUNC_STATIC(QFILEDIALOG_SELECTMIMETYPEFILTER)
{
  QFileDialog *obj = (QFileDialog *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISCHAR(1)) {
#endif
      obj->selectMimeTypeFilter(PQSTRING(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
static QString getExistingDirectory( QWidget * parent = 0, const QString &caption = QString(), const QString &dir =
QString(), QFileDialog::Options options = QFileDialog::ShowDirsOnly )
*/
HB_FUNC_STATIC(QFILEDIALOG_GETEXISTINGDIRECTORY)
{
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
  if (ISBETWEEN(0, 4) && ISQWIDGETORNIL(1) && ISCHARORNIL(2) &&
      ISCHARORNIL(3) && ISNUMORNIL(4)) {
#endif
    RQSTRING(QFileDialog::getExistingDirectory(OPQWIDGET(1, 0), OPQSTRING(2, QString()), OPQSTRING(3, QString()),
                                               HB_ISNIL(4) ? (QFileDialog::Options)QFileDialog::ShowDirsOnly
                                                           : (QFileDialog::Options)hb_parni(4)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
#endif
}

/*
static QString getOpenFileName( QWidget * parent = 0, const QString &caption = QString(), const QString &dir =
QString(), const QString &filter = QString(), QString * selectedFilter = 0, QFileDialog::Options options = 0 )
*/
HB_FUNC_STATIC(QFILEDIALOG_GETOPENFILENAME)
{
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
  if (ISBETWEEN(0, 6) && ISQWIDGETORNIL(1) && ISCHARORNIL(2) &&
      ISCHARORNIL(3) && ISCHARORNIL(4) && ISCHARORNIL(5) &&
      ISNUMORNIL(6)) {
#endif
    RQSTRING(QFileDialog::getOpenFileName(OPQWIDGET(1, 0), OPQSTRING(2, QString()), OPQSTRING(3, QString()),
                                          OPQSTRING(4, QString()), NULL,
                                          HB_ISNIL(6) ? (QFileDialog::Options)0 : (QFileDialog::Options)hb_parni(6)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
#endif
}

/*
static QStringList getOpenFileNames( QWidget * parent = 0, const QString &caption = QString(), const QString &dir =
QString(), const QString &filter = QString(), QString * selectedFilter = 0, QFileDialog::Options options = 0 )
*/
HB_FUNC_STATIC(QFILEDIALOG_GETOPENFILENAMES)
{
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
  if (ISBETWEEN(0, 6) && ISQWIDGETORNIL(1) && ISCHARORNIL(2) &&
      ISCHARORNIL(3) && ISCHARORNIL(4) && ISCHARORNIL(5) &&
      ISNUMORNIL(6)) {
#endif
    RQSTRINGLIST(QFileDialog::getOpenFileNames(
        OPQWIDGET(1, 0), OPQSTRING(2, QString()), OPQSTRING(3, QString()), OPQSTRING(4, QString()), NULL,
        HB_ISNIL(6) ? (QFileDialog::Options)0 : (QFileDialog::Options)hb_parni(6)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
#endif
}

/*
static QString getSaveFileName( QWidget * parent = 0, const QString &caption = QString(), const QString &dir =
QString(), const QString &filter = QString(), QString * selectedFilter = 0, QFileDialog::Options options = 0 )
*/
HB_FUNC_STATIC(QFILEDIALOG_GETSAVEFILENAME)
{
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
  if (ISBETWEEN(0, 6) && ISQWIDGETORNIL(1) && ISCHARORNIL(2) &&
      ISCHARORNIL(3) && ISCHARORNIL(4) && ISCHARORNIL(5) &&
      ISNUMORNIL(6)) {
#endif
    RQSTRING(QFileDialog::getSaveFileName(OPQWIDGET(1, 0), OPQSTRING(2, QString()), OPQSTRING(3, QString()),
                                          OPQSTRING(4, QString()), NULL,
                                          HB_ISNIL(6) ? (QFileDialog::Options)0 : (QFileDialog::Options)hb_parni(6)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
#endif
}

/*
static QUrl getOpenFileUrl( QWidget * parent = 0, const QString &caption = QString(), const QUrl &dir = QUrl(), const
QString &filter = QString(), QString * selectedFilter = 0, QFileDialog::Options options = 0, const QStringList &
supportedSchemes = QStringList() )
*/
HB_FUNC_STATIC(QFILEDIALOG_GETOPENFILEURL)
{
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
  if (ISBETWEEN(0, 7) && ISQWIDGETORNIL(1) && ISCHARORNIL(2) && (ISQURL(3) || HB_ISNIL(3)) &&
      ISCHARORNIL(4) && ISCHARORNIL(5) && ISNUMORNIL(6) &&
      (HB_ISARRAY(7) || HB_ISNIL(7))) {
#endif
    QUrl *ptr = new QUrl(QFileDialog::getOpenFileUrl(
        OPQWIDGET(1, 0), OPQSTRING(2, QString()), HB_ISNIL(3) ? QUrl() : *(QUrl *)Qt5xHb::itemGetPtr(3),
        OPQSTRING(4, QString()), NULL, HB_ISNIL(6) ? (QFileDialog::Options)0 : (QFileDialog::Options)hb_parni(6),
        OPQSTRINGLIST(7, QStringList())));
    Qt5xHb::createReturnClass(ptr, "QURL", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
#endif
}

/*
static QUrl getSaveFileUrl( QWidget * parent = 0, const QString &caption = QString(), const QUrl &dir = QUrl(), const
QString &filter = QString(), QString * selectedFilter = 0, QFileDialog::Options options = 0, const QStringList &
supportedSchemes = QStringList() )
*/
HB_FUNC_STATIC(QFILEDIALOG_GETSAVEFILEURL)
{
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
  if (ISBETWEEN(0, 7) && ISQWIDGETORNIL(1) && ISCHARORNIL(2) && (ISQURL(3) || HB_ISNIL(3)) &&
      ISCHARORNIL(4) && ISCHARORNIL(5) && ISNUMORNIL(6) &&
      (HB_ISARRAY(7) || HB_ISNIL(7))) {
#endif
    QUrl *ptr = new QUrl(QFileDialog::getSaveFileUrl(
        OPQWIDGET(1, 0), OPQSTRING(2, QString()), HB_ISNIL(3) ? QUrl() : *(QUrl *)Qt5xHb::itemGetPtr(3),
        OPQSTRING(4, QString()), NULL, HB_ISNIL(6) ? (QFileDialog::Options)0 : (QFileDialog::Options)hb_parni(6),
        OPQSTRINGLIST(7, QStringList())));
    Qt5xHb::createReturnClass(ptr, "QURL", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
#endif
}

/*
static QUrl getExistingDirectoryUrl( QWidget * parent = 0, const QString &caption = QString(), const QUrl &dir =
QUrl(), QFileDialog::Options options = QFileDialog::ShowDirsOnly, const QStringList &supportedSchemes = QStringList() )
*/
HB_FUNC_STATIC(QFILEDIALOG_GETEXISTINGDIRECTORYURL)
{
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
  if (ISBETWEEN(0, 5) && ISQWIDGETORNIL(1) && ISCHARORNIL(2) && (ISQURL(3) || HB_ISNIL(3)) &&
      ISNUMORNIL(4) && (HB_ISARRAY(5) || HB_ISNIL(5))) {
#endif
    QUrl *ptr = new QUrl(QFileDialog::getExistingDirectoryUrl(
        OPQWIDGET(1, 0), OPQSTRING(2, QString()), HB_ISNIL(3) ? QUrl() : *(QUrl *)Qt5xHb::itemGetPtr(3),
        HB_ISNIL(4) ? (QFileDialog::Options)QFileDialog::ShowDirsOnly : (QFileDialog::Options)hb_parni(4),
        OPQSTRINGLIST(5, QStringList())));
    Qt5xHb::createReturnClass(ptr, "QURL", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
#endif
}

/*
static QList<QUrl> getOpenFileUrls( QWidget * parent = 0, const QString &caption = QString(), const QUrl &dir =
QUrl(), const QString &filter = QString(), QString * selectedFilter = 0, QFileDialog::Options options = 0, const
QStringList &supportedSchemes = QStringList() )
*/
HB_FUNC_STATIC(QFILEDIALOG_GETOPENFILEURLS)
{
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
  if (ISBETWEEN(0, 7) && ISQWIDGETORNIL(1) && ISCHARORNIL(2) && (ISQURL(3) || HB_ISNIL(3)) &&
      ISCHARORNIL(4) && ISCHARORNIL(5) && ISNUMORNIL(6) &&
      (HB_ISARRAY(7) || HB_ISNIL(7))) {
#endif
    QList<QUrl> list = QFileDialog::getOpenFileUrls(
        OPQWIDGET(1, 0), OPQSTRING(2, QString()), HB_ISNIL(3) ? QUrl() : *(QUrl *)Qt5xHb::itemGetPtr(3),
        OPQSTRING(4, QString()), NULL, HB_ISNIL(6) ? (QFileDialog::Options)0 : (QFileDialog::Options)hb_parni(6),
        OPQSTRINGLIST(7, QStringList()));
    PHB_DYNS pDynSym = hb_dynsymFindName("QURL");
    PHB_ITEM pArray = hb_itemArrayNew(0);
    if (pDynSym != NULL) {
      for (int i = 0; i < list.count(); i++) {
        hb_vmPushDynSym(pDynSym);
        hb_vmPushNil();
        hb_vmDo(0);
        PHB_ITEM pObject = hb_itemNew(NULL);
        hb_itemCopy(pObject, hb_stackReturnItem());
        PHB_ITEM pItem = hb_itemPutPtr(NULL, new QUrl(list[i]));
        hb_objSendMsg(pObject, "_POINTER", 1, pItem);
        hb_itemRelease(pItem);
        PHB_ITEM pDestroy = hb_itemPutL(NULL, true);
        hb_objSendMsg(pObject, "_SELF_DESTRUCTION", 1, pDestroy);
        hb_itemRelease(pDestroy);
        hb_arrayAddForward(pArray, pObject);
        hb_itemRelease(pObject);
      }
    } else {
      hb_errRT_BASE(EG_NOFUNC, 1001, NULL, "QURL", HB_ERR_ARGS_BASEPARAMS);
    }
    hb_itemReturnRelease(pArray);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
#endif
}

void QFileDialogSlots_connect_signal(const QString &signal, const QString &slot);

HB_FUNC_STATIC(QFILEDIALOG_ONCURRENTCHANGED)
{
  QFileDialogSlots_connect_signal("currentChanged(QString)", "currentChanged(QString)");
}

HB_FUNC_STATIC(QFILEDIALOG_ONDIRECTORYENTERED)
{
  QFileDialogSlots_connect_signal("directoryEntered(QString)", "directoryEntered(QString)");
}

HB_FUNC_STATIC(QFILEDIALOG_ONFILESELECTED)
{
  QFileDialogSlots_connect_signal("fileSelected(QString)", "fileSelected(QString)");
}

HB_FUNC_STATIC(QFILEDIALOG_ONFILESSELECTED)
{
  QFileDialogSlots_connect_signal("filesSelected(QStringList)", "filesSelected(QStringList)");
}

HB_FUNC_STATIC(QFILEDIALOG_ONFILTERSELECTED)
{
  QFileDialogSlots_connect_signal("filterSelected(QString)", "filterSelected(QString)");
}

HB_FUNC_STATIC(QFILEDIALOG_ONURLSELECTED)
{
  QFileDialogSlots_connect_signal("urlSelected(QUrl)", "urlSelected(QUrl)");
}

HB_FUNC_STATIC(QFILEDIALOG_ONURLSSELECTED)
{
  QFileDialogSlots_connect_signal("urlsSelected(QList<QUrl>)", "urlsSelected(QList<QUrl>)");
}

HB_FUNC_STATIC(QFILEDIALOG_ONCURRENTURLCHANGED)
{
  QFileDialogSlots_connect_signal("currentUrlChanged(QUrl)", "currentUrlChanged(QUrl)");
}

HB_FUNC_STATIC(QFILEDIALOG_ONDIRECTORYURLENTERED)
{
  QFileDialogSlots_connect_signal("directoryUrlEntered(QUrl)", "directoryUrlEntered(QUrl)");
}

#pragma ENDDUMP
