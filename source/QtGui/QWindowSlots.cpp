//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

#include "QWindowSlots.hpp"

QWindowSlots::QWindowSlots(QObject *parent) : QObject(parent)
{
}

QWindowSlots::~QWindowSlots()
{
}

void QWindowSlots::contentOrientationChanged(Qt::ScreenOrientation orientation)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "contentOrientationChanged(Qt::ScreenOrientation)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QWINDOW");
    PHB_ITEM porientation = hb_itemPutNI(NULL, static_cast<int>(orientation));

    hb_vmEvalBlockV(cb, 2, psender, porientation);

    hb_itemRelease(psender);
    hb_itemRelease(porientation);
  }
}

void QWindowSlots::focusObjectChanged(QObject *focusObject)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "focusObjectChanged(QObject*)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QWINDOW");
    PHB_ITEM pfocusObject = Qt5xHb::Signals_return_qobject(focusObject, "QOBJECT");

    hb_vmEvalBlockV(cb, 2, psender, pfocusObject);

    hb_itemRelease(psender);
    hb_itemRelease(pfocusObject);
  }
}

void QWindowSlots::heightChanged(int arg)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "heightChanged(int)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QWINDOW");
    PHB_ITEM parg = hb_itemPutNI(NULL, arg);

    hb_vmEvalBlockV(cb, 2, psender, parg);

    hb_itemRelease(psender);
    hb_itemRelease(parg);
  }
}

void QWindowSlots::screenChanged(QScreen *screen)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "screenChanged(QScreen*)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QWINDOW");
    PHB_ITEM pscreen = Qt5xHb::Signals_return_qobject(screen, "QSCREEN");

    hb_vmEvalBlockV(cb, 2, psender, pscreen);

    hb_itemRelease(psender);
    hb_itemRelease(pscreen);
  }
}

void QWindowSlots::visibleChanged(bool arg)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "visibleChanged(bool)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QWINDOW");
    PHB_ITEM parg = hb_itemPutL(NULL, arg);

    hb_vmEvalBlockV(cb, 2, psender, parg);

    hb_itemRelease(psender);
    hb_itemRelease(parg);
  }
}

void QWindowSlots::widthChanged(int arg)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "widthChanged(int)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QWINDOW");
    PHB_ITEM parg = hb_itemPutNI(NULL, arg);

    hb_vmEvalBlockV(cb, 2, psender, parg);

    hb_itemRelease(psender);
    hb_itemRelease(parg);
  }
}

void QWindowSlots::windowModalityChanged(Qt::WindowModality windowModality)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "windowModalityChanged(Qt::WindowModality)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QWINDOW");
    PHB_ITEM pwindowModality = hb_itemPutNI(NULL, static_cast<int>(windowModality));

    hb_vmEvalBlockV(cb, 2, psender, pwindowModality);

    hb_itemRelease(psender);
    hb_itemRelease(pwindowModality);
  }
}

void QWindowSlots::xChanged(int arg)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "xChanged(int)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QWINDOW");
    PHB_ITEM parg = hb_itemPutNI(NULL, arg);

    hb_vmEvalBlockV(cb, 2, psender, parg);

    hb_itemRelease(psender);
    hb_itemRelease(parg);
  }
}

void QWindowSlots::yChanged(int arg)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "yChanged(int)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QWINDOW");
    PHB_ITEM parg = hb_itemPutNI(NULL, arg);

    hb_vmEvalBlockV(cb, 2, psender, parg);

    hb_itemRelease(psender);
    hb_itemRelease(parg);
  }
}

void QWindowSlots_connect_signal(const QString &signal, const QString &slot)
{
  QWindow *obj = (QWindow *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
    QWindowSlots *s = QCoreApplication::instance()->findChild<QWindowSlots *>();

    if (s == NULL)
    {
      s = new QWindowSlots();
      s->moveToThread(QCoreApplication::instance()->thread());
      s->setParent(QCoreApplication::instance());
    }

    hb_retl(Qt5xHb::Signals_connection_disconnection(s, signal, slot));
  } else {
    hb_retl(false);
  }
}
