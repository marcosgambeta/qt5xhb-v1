//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

// clang-format off

#include "hbclass.ch"

#ifndef QT5XHB_NO_REQUESTS
REQUEST QCOLOR
#endif

CLASS QOpenGLTexture

   DATA pointer
   DATA self_destruction INIT .F.

   METHOD new
   METHOD delete
   METHOD create
   METHOD destroy
   METHOD isCreated
   METHOD textureId
   METHOD bind
   METHOD release
   METHOD isBound
   METHOD isBind
   METHOD setFormat
   METHOD format
   METHOD setSize
   METHOD width
   METHOD height
   METHOD depth
   METHOD setMipLevels
   METHOD mipLevels
   METHOD maximumMipLevels
   METHOD setLayers
   METHOD layers
   METHOD faces
   METHOD allocateStorage
   METHOD isStorageAllocated
   METHOD createTextureView
   METHOD isTextureView
   METHOD setData
   METHOD setCompressedData
   METHOD setMipBaseLevel
   METHOD mipBaseLevel
   METHOD setMipMaxLevel
   METHOD mipMaxLevel
   METHOD setMipLevelRange
   METHOD setAutoMipMapGenerationEnabled
   METHOD isAutoMipMapGenerationEnabled
   METHOD generateMipMaps
   METHOD setSwizzleMask
   METHOD swizzleMask
   METHOD setDepthStencilMode
   METHOD depthStencilMode
   METHOD setMinificationFilter
   METHOD minificationFilter
   METHOD setMagnificationFilter
   METHOD magnificationFilter
   METHOD setMinMagFilters
   METHOD setMaximumAnisotropy
   METHOD maximumAnisotropy
   METHOD setWrapMode
   METHOD wrapMode
   METHOD setBorderColor1
   METHOD setBorderColor2
   METHOD setBorderColor3
   METHOD setBorderColor4
   METHOD setBorderColor
   METHOD borderColor1
   METHOD borderColor3
   METHOD borderColor
   METHOD setMinimumLevelOfDetail
   METHOD minimumLevelOfDetail
   METHOD setMaximumLevelOfDetail
   METHOD maximumLevelOfDetail
   METHOD setLevelOfDetailRange
   METHOD setLevelofDetailBias
   METHOD levelofDetailBias
   METHOD boundTextureId
   METHOD hasFeature

   METHOD newFrom
   METHOD newFromObject
   METHOD newFromPointer
   METHOD selfDestruction
   METHOD setSelfDestruction

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QOpenGLTexture
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

// clang-format on

#pragma BEGINDUMP

#include <QtCore/Qt>

#ifndef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
#include <QtGui/QOpenGLTexture>
#endif
#endif

#include "qt5xhb_common.hpp"
#include "qt5xhb_macros.hpp"
#include "qt5xhb_utils.hpp"

#ifdef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
#include <QtGui/QOpenGLTexture>
#endif
#endif

#include <QtGui/QColor>

HB_FUNC_STATIC(QOPENGLTEXTURE_NEW)
{
  if (ISNUMPAR(1) && HB_ISNUM(1))
  {
    /*
    QOpenGLTexture( QOpenGLTexture::Target target )
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
    QOpenGLTexture *obj = new QOpenGLTexture((QOpenGLTexture::Target)hb_parni(1));
    Qt5xHb::returnNewObject(obj, true);
#endif
  }
  else if (ISBETWEEN(1, 2) && ISQIMAGE(1) && (HB_ISNUM(2) || HB_ISNIL(2)))
  {
    /*
    QOpenGLTexture( const QImage &image, QOpenGLTexture::MipMapGeneration genMipMaps = QOpenGLTexture::GenerateMipMaps
    )
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
    QOpenGLTexture *obj =
        new QOpenGLTexture(*PQIMAGE(1), HB_ISNIL(2) ? (QOpenGLTexture::MipMapGeneration)QOpenGLTexture::GenerateMipMaps
                                                    : (QOpenGLTexture::MipMapGeneration)hb_parni(2));
    Qt5xHb::returnNewObject(obj, true);
#endif
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

HB_FUNC_STATIC(QOPENGLTEXTURE_DELETE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
    delete obj;
    obj = NULL;
    PHB_ITEM ptr = hb_itemPutPtr(NULL, NULL);
    hb_objSendMsg(hb_stackSelfItem(), "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
bool create()
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_CREATE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RBOOL(obj->create());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void destroy()
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_DESTROY)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      obj->destroy();
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
bool isCreated() const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_ISCREATED)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RBOOL(obj->isCreated());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
GLuint textureId() const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_TEXTUREID)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RGLUINT(obj->textureId());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

HB_FUNC_STATIC(QOPENGLTEXTURE_BIND)
{
  if (ISNUMPAR(0))
  {
    /*
    void bind()
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
    QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

    if (obj != NULL)
    {
      obj->bind();
    }

    hb_itemReturn(hb_stackSelfItem());
#endif
  }
  else if (ISBETWEEN(1, 2) && HB_ISNUM(1) && (HB_ISNUM(2) || HB_ISNIL(2)))
  {
    /*
    void bind( uint unit, QOpenGLTexture::TextureUnitReset reset = QOpenGLTexture::DontResetTextureUnit )
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
    QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

    if (obj != NULL)
    {
      obj->bind(PUINT(1), HB_ISNIL(2) ? (QOpenGLTexture::TextureUnitReset)QOpenGLTexture::DontResetTextureUnit
                                      : (QOpenGLTexture::TextureUnitReset)hb_parni(2));
    }

    hb_itemReturn(hb_stackSelfItem());
#endif
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

HB_FUNC_STATIC(QOPENGLTEXTURE_RELEASE)
{
  if (ISNUMPAR(0))
  {
    /*
    void release()
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
    QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

    if (obj != NULL)
    {
      obj->release();
    }

    hb_itemReturn(hb_stackSelfItem());
#endif
  }
  else if (ISBETWEEN(1, 2) && HB_ISNUM(1) && (HB_ISNUM(2) || HB_ISNIL(2)))
  {
    /*
    void release( uint unit, QOpenGLTexture::TextureUnitReset reset = QOpenGLTexture::DontResetTextureUnit )
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
    QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

    if (obj != NULL)
    {
      obj->release(PUINT(1), HB_ISNIL(2) ? (QOpenGLTexture::TextureUnitReset)QOpenGLTexture::DontResetTextureUnit
                                         : (QOpenGLTexture::TextureUnitReset)hb_parni(2));
    }

    hb_itemReturn(hb_stackSelfItem());
#endif
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

HB_FUNC_STATIC(QOPENGLTEXTURE_ISBOUND)
{
  if (ISNUMPAR(0))
  {
    /*
    bool isBound() const
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
    QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

    if (obj != NULL)
    {
      RBOOL(obj->isBound());
    }
#endif
  }
  else if (ISNUMPAR(1) && HB_ISNUM(1))
  {
    /*
    bool isBound( uint unit )
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
    QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

    if (obj != NULL)
    {
      RBOOL(obj->isBound(PUINT(1)));
    }
#endif
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

/*
void setFormat( QOpenGLTexture::TextureFormat format )
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_SETFORMAT)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      obj->setFormat((QOpenGLTexture::TextureFormat)hb_parni(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QOpenGLTexture::TextureFormat format() const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_FORMAT)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RENUM(obj->format());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setSize( int width, int height = 1, int depth = 1 )
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_SETSIZE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(1, 3) && HB_ISNUM(1) && (HB_ISNUM(2) || HB_ISNIL(2)) && (HB_ISNUM(3) || HB_ISNIL(3)))
    {
#endif
      obj->setSize(PINT(1), OPINT(2, 1), OPINT(3, 1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
int width() const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_WIDTH)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RINT(obj->width());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
int height() const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_HEIGHT)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RINT(obj->height());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
int depth() const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_DEPTH)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RINT(obj->depth());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setMipLevels( int levels )
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_SETMIPLEVELS)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      obj->setMipLevels(PINT(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
int mipLevels() const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_MIPLEVELS)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RINT(obj->mipLevels());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
int maximumMipLevels() const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_MAXIMUMMIPLEVELS)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RINT(obj->maximumMipLevels());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setLayers( int layers )
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_SETLAYERS)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      obj->setLayers(PINT(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
int layers() const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_LAYERS)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RINT(obj->layers());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
int faces() const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_FACES)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RINT(obj->faces());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void allocateStorage()
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_ALLOCATESTORAGE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      obj->allocateStorage();
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
bool isStorageAllocated() const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_ISSTORAGEALLOCATED)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RBOOL(obj->isStorageAllocated());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
QOpenGLTexture * createTextureView( QOpenGLTexture::Target target, QOpenGLTexture::TextureFormat viewFormat, int
minimumMipmapLevel, int maximumMipmapLevel, int minimumLayer, int maximumLayer ) const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_CREATETEXTUREVIEW)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(6) && HB_ISNUM(1) && HB_ISNUM(2) && HB_ISNUM(3) && HB_ISNUM(4) && HB_ISNUM(5) && HB_ISNUM(6))
    {
#endif
      QOpenGLTexture *ptr =
          obj->createTextureView((QOpenGLTexture::Target)hb_parni(1), (QOpenGLTexture::TextureFormat)hb_parni(2),
                                 PINT(3), PINT(4), PINT(5), PINT(6));
      Qt5xHb::createReturnClass(ptr, "QOPENGLTEXTURE", false);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
bool isTextureView() const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_ISTEXTUREVIEW)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RBOOL(obj->isTextureView());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

HB_FUNC_STATIC(QOPENGLTEXTURE_SETDATA)
{
}

HB_FUNC_STATIC(QOPENGLTEXTURE_SETCOMPRESSEDDATA)
{
}

/*
void setMipBaseLevel( int baseLevel )
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_SETMIPBASELEVEL)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      obj->setMipBaseLevel(PINT(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
int mipBaseLevel() const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_MIPBASELEVEL)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RINT(obj->mipBaseLevel());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setMipMaxLevel( int maxLevel )
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_SETMIPMAXLEVEL)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      obj->setMipMaxLevel(PINT(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
int mipMaxLevel() const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_MIPMAXLEVEL)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RINT(obj->mipMaxLevel());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setMipLevelRange( int baseLevel, int maxLevel )
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_SETMIPLEVELRANGE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(2) && HB_ISNUM(1) && HB_ISNUM(2))
    {
#endif
      obj->setMipLevelRange(PINT(1), PINT(2));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
void setAutoMipMapGenerationEnabled( bool enabled )
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_SETAUTOMIPMAPGENERATIONENABLED)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISLOG(1))
    {
#endif
      obj->setAutoMipMapGenerationEnabled(PBOOL(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
bool isAutoMipMapGenerationEnabled() const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_ISAUTOMIPMAPGENERATIONENABLED)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RBOOL(obj->isAutoMipMapGenerationEnabled());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

HB_FUNC_STATIC(QOPENGLTEXTURE_GENERATEMIPMAPS)
{
  if (ISNUMPAR(0))
  {
    /*
    void generateMipMaps()
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
    QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

    if (obj != NULL)
    {
      obj->generateMipMaps();
    }

    hb_itemReturn(hb_stackSelfItem());
#endif
  }
  else if (ISBETWEEN(1, 2) && HB_ISNUM(1) && (HB_ISLOG(2) || HB_ISNIL(2)))
  {
    /*
    void generateMipMaps( int baseLevel, bool resetBaseLevel = true )
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
    QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

    if (obj != NULL)
    {
      obj->generateMipMaps(PINT(1), OPBOOL(2, true));
    }

    hb_itemReturn(hb_stackSelfItem());
#endif
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

HB_FUNC_STATIC(QOPENGLTEXTURE_SETSWIZZLEMASK)
{
  if (ISNUMPAR(2) && HB_ISNUM(1) && HB_ISNUM(2))
  {
    /*
    void setSwizzleMask( QOpenGLTexture::SwizzleComponent component, QOpenGLTexture::SwizzleValue value )
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
    QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

    if (obj != NULL)
    {
      obj->setSwizzleMask((QOpenGLTexture::SwizzleComponent)hb_parni(1), (QOpenGLTexture::SwizzleValue)hb_parni(2));
    }

    hb_itemReturn(hb_stackSelfItem());
#endif
  }
  else if (ISNUMPAR(4) && HB_ISNUM(1) && HB_ISNUM(2) && HB_ISNUM(3) && HB_ISNUM(4))
  {
    /*
    void setSwizzleMask( QOpenGLTexture::SwizzleValue r, QOpenGLTexture::SwizzleValue g, QOpenGLTexture::SwizzleValue b,
    QOpenGLTexture::SwizzleValue a )
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
    QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

    if (obj != NULL)
    {
      obj->setSwizzleMask((QOpenGLTexture::SwizzleValue)hb_parni(1), (QOpenGLTexture::SwizzleValue)hb_parni(2),
                          (QOpenGLTexture::SwizzleValue)hb_parni(3), (QOpenGLTexture::SwizzleValue)hb_parni(4));
    }

    hb_itemReturn(hb_stackSelfItem());
#endif
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

/*
QOpenGLTexture::SwizzleValue swizzleMask( QOpenGLTexture::SwizzleComponent component ) const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_SWIZZLEMASK)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      RENUM(obj->swizzleMask((QOpenGLTexture::SwizzleComponent)hb_parni(1)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setDepthStencilMode( QOpenGLTexture::DepthStencilMode mode )
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_SETDEPTHSTENCILMODE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      obj->setDepthStencilMode((QOpenGLTexture::DepthStencilMode)hb_parni(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QOpenGLTexture::DepthStencilMode depthStencilMode() const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_DEPTHSTENCILMODE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RENUM(obj->depthStencilMode());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setMinificationFilter( QOpenGLTexture::Filter filter )
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_SETMINIFICATIONFILTER)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      obj->setMinificationFilter((QOpenGLTexture::Filter)hb_parni(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QOpenGLTexture::Filter minificationFilter() const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_MINIFICATIONFILTER)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RENUM(obj->minificationFilter());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setMagnificationFilter( QOpenGLTexture::Filter filter )
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_SETMAGNIFICATIONFILTER)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      obj->setMagnificationFilter((QOpenGLTexture::Filter)hb_parni(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QOpenGLTexture::Filter magnificationFilter() const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_MAGNIFICATIONFILTER)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RENUM(obj->magnificationFilter());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setMinMagFilters( QOpenGLTexture::Filter minificationFilter, QOpenGLTexture::Filter magnificationFilter )
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_SETMINMAGFILTERS)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(2) && HB_ISNUM(1) && HB_ISNUM(2))
    {
#endif
      obj->setMinMagFilters((QOpenGLTexture::Filter)hb_parni(1), (QOpenGLTexture::Filter)hb_parni(2));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
void setMaximumAnisotropy( float anisotropy )
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_SETMAXIMUMANISOTROPY)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      obj->setMaximumAnisotropy(PFLOAT(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
float maximumAnisotropy() const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_MAXIMUMANISOTROPY)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RFLOAT(obj->maximumAnisotropy());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

HB_FUNC_STATIC(QOPENGLTEXTURE_SETWRAPMODE)
{
  if (ISNUMPAR(1) && HB_ISNUM(1))
  {
    /*
    void setWrapMode( QOpenGLTexture::WrapMode mode )
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
    QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

    if (obj != NULL)
    {
      obj->setWrapMode((QOpenGLTexture::WrapMode)hb_parni(1));
    }

    hb_itemReturn(hb_stackSelfItem());
#endif
  }
  else if (ISNUMPAR(2) && HB_ISNUM(1) && HB_ISNUM(2))
  {
    /*
    void setWrapMode( QOpenGLTexture::CoordinateDirection direction, QOpenGLTexture::WrapMode mode )
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
    QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

    if (obj != NULL)
    {
      obj->setWrapMode((QOpenGLTexture::CoordinateDirection)hb_parni(1), (QOpenGLTexture::WrapMode)hb_parni(2));
    }

    hb_itemReturn(hb_stackSelfItem());
#endif
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

/*
QOpenGLTexture::WrapMode wrapMode( QOpenGLTexture::CoordinateDirection direction ) const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_WRAPMODE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      RENUM(obj->wrapMode((QOpenGLTexture::CoordinateDirection)hb_parni(1)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setBorderColor( QColor color )
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_SETBORDERCOLOR1)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQCOLOR(1))
    {
#endif
      obj->setBorderColor(*PQCOLOR(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
void setBorderColor( float r, float g, float b, float a )
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_SETBORDERCOLOR2)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(4) && HB_ISNUM(1) && HB_ISNUM(2) && HB_ISNUM(3) && HB_ISNUM(4))
    {
#endif
      obj->setBorderColor(PFLOAT(1), PFLOAT(2), PFLOAT(3), PFLOAT(4));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
void setBorderColor( int r, int g, int b, int a )
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_SETBORDERCOLOR3)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(4) && HB_ISNUM(1) && HB_ISNUM(2) && HB_ISNUM(3) && HB_ISNUM(4))
    {
#endif
      obj->setBorderColor(PINT(1), PINT(2), PINT(3), PINT(4));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
void setBorderColor( uint r, uint g, uint b, uint a )
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_SETBORDERCOLOR4)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(4) && HB_ISNUM(1) && HB_ISNUM(2) && HB_ISNUM(3) && HB_ISNUM(4))
    {
#endif
      obj->setBorderColor(PUINT(1), PUINT(2), PUINT(3), PUINT(4));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

HB_FUNC_STATIC(QOPENGLTEXTURE_SETBORDERCOLOR)
{
  if (ISNUMPAR(1) && ISQCOLOR(1))
  {
    HB_FUNC_EXEC(QOPENGLTEXTURE_SETBORDERCOLOR1);
  }
  else if (ISNUMPAR(4) && HB_ISNUM(1) && HB_ISNUM(2) && HB_ISNUM(3) && HB_ISNUM(4))
  {
    HB_FUNC_EXEC(QOPENGLTEXTURE_SETBORDERCOLOR2);
  }
  else if (ISNUMPAR(4) && HB_ISNUM(1) && HB_ISNUM(2) && HB_ISNUM(3) && HB_ISNUM(4))
  {
    HB_FUNC_EXEC(QOPENGLTEXTURE_SETBORDERCOLOR3);
  }
  else if (ISNUMPAR(4) && HB_ISNUM(1) && HB_ISNUM(2) && HB_ISNUM(3) && HB_ISNUM(4))
  {
    HB_FUNC_EXEC(QOPENGLTEXTURE_SETBORDERCOLOR4);
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

/*
QColor borderColor() const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_BORDERCOLOR1)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QColor *ptr = new QColor(obj->borderColor());
      Qt5xHb::createReturnClass(ptr, "QCOLOR", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void borderColor( int * border ) const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_BORDERCOLOR3)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      int par1;
      obj->borderColor(&par1);
      hb_storni(par1, 1);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

HB_FUNC_STATIC(QOPENGLTEXTURE_BORDERCOLOR)
{
  if (ISNUMPAR(0))
  {
    HB_FUNC_EXEC(QOPENGLTEXTURE_BORDERCOLOR1);
  }
  else if (ISNUMPAR(1) && HB_ISNUM(1))
  {
    HB_FUNC_EXEC(QOPENGLTEXTURE_BORDERCOLOR3);
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

/*
void setMinimumLevelOfDetail( float value )
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_SETMINIMUMLEVELOFDETAIL)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      obj->setMinimumLevelOfDetail(PFLOAT(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
float minimumLevelOfDetail() const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_MINIMUMLEVELOFDETAIL)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RFLOAT(obj->minimumLevelOfDetail());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setMaximumLevelOfDetail( float value )
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_SETMAXIMUMLEVELOFDETAIL)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      obj->setMaximumLevelOfDetail(PFLOAT(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
float maximumLevelOfDetail() const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_MAXIMUMLEVELOFDETAIL)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RFLOAT(obj->maximumLevelOfDetail());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setLevelOfDetailRange( float min, float max )
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_SETLEVELOFDETAILRANGE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(2) && HB_ISNUM(1) && HB_ISNUM(2))
    {
#endif
      obj->setLevelOfDetailRange(PFLOAT(1), PFLOAT(2));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
void setLevelofDetailBias( float bias )
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_SETLEVELOFDETAILBIAS)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      obj->setLevelofDetailBias(PFLOAT(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
float levelofDetailBias() const
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_LEVELOFDETAILBIAS)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QOpenGLTexture *obj = (QOpenGLTexture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RFLOAT(obj->levelofDetailBias());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

HB_FUNC_STATIC(QOPENGLTEXTURE_BOUNDTEXTUREID)
{
  if (ISNUMPAR(1) && HB_ISNUM(1))
  {
    /*
    static GLuint boundTextureId( QOpenGLTexture::BindingTarget target )
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
    RGLUINT(QOpenGLTexture::boundTextureId((QOpenGLTexture::BindingTarget)hb_parni(1)));
#endif
  }
  else if (ISNUMPAR(2) && HB_ISNUM(1) && HB_ISNUM(2))
  {
    /*
    static GLuint boundTextureId( uint unit, QOpenGLTexture::BindingTarget target )
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
    RGLUINT(QOpenGLTexture::boundTextureId(PUINT(1), (QOpenGLTexture::BindingTarget)hb_parni(2)));
#endif
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

/*
static bool hasFeature( QOpenGLTexture::Feature feature )
*/
HB_FUNC_STATIC(QOPENGLTEXTURE_HASFEATURE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
  if (ISNUMPAR(1) && HB_ISNUM(1))
  {
#endif
    RBOOL(QOpenGLTexture::hasFeature((QOpenGLTexture::Feature)hb_parni(1)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
#endif
#endif
}

HB_FUNC_STATIC(QOPENGLTEXTURE_NEWFROM)
{
  PHB_ITEM self = hb_stackSelfItem();

  if (hb_pcount() == 1 && HB_ISOBJECT(1))
  {
    PHB_ITEM ptr = hb_itemPutPtr(NULL, hb_itemGetPtr(hb_objSendMsg(hb_param(1, HB_IT_OBJECT), "POINTER", 0)));
    hb_objSendMsg(self, "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
    PHB_ITEM des = hb_itemPutL(NULL, false);
    hb_objSendMsg(self, "_SELF_DESTRUCTION", 1, des);
    hb_itemRelease(des);
  }
  else if (hb_pcount() == 1 && HB_ISPOINTER(1))
  {
    PHB_ITEM ptr = hb_itemPutPtr(NULL, hb_itemGetPtr(hb_param(1, HB_IT_POINTER)));
    hb_objSendMsg(self, "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
    PHB_ITEM des = hb_itemPutL(NULL, false);
    hb_objSendMsg(self, "_SELF_DESTRUCTION", 1, des);
    hb_itemRelease(des);
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }

  hb_itemReturn(self);
}

HB_FUNC_STATIC(QOPENGLTEXTURE_NEWFROMOBJECT)
{
  HB_FUNC_EXEC(QOPENGLTEXTURE_NEWFROM);
}

HB_FUNC_STATIC(QOPENGLTEXTURE_NEWFROMPOINTER)
{
  HB_FUNC_EXEC(QOPENGLTEXTURE_NEWFROM);
}

HB_FUNC_STATIC(QOPENGLTEXTURE_SELFDESTRUCTION)
{
  hb_retl(hb_itemGetL(hb_objSendMsg(hb_stackSelfItem(), "SELF_DESTRUCTION", 0)));
}

HB_FUNC_STATIC(QOPENGLTEXTURE_SETSELFDESTRUCTION)
{
  PHB_ITEM self = hb_stackSelfItem();

  if (hb_pcount() == 1 && HB_ISLOG(1))
  {
    PHB_ITEM des = hb_itemPutL(NULL, hb_parl(1));
    hb_objSendMsg(self, "_SELF_DESTRUCTION", 1, des);
    hb_itemRelease(des);
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }

  hb_itemReturn(self);
}

#pragma ENDDUMP
