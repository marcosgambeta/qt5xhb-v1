//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

#include "QWebSocketServerSlots.hpp"

QWebSocketServerSlots::QWebSocketServerSlots(QObject *parent) : QObject(parent)
{
}

QWebSocketServerSlots::~QWebSocketServerSlots()
{
}

#if (QT_VERSION >= QT_VERSION_CHECK(5, 3, 0))
void QWebSocketServerSlots::acceptError(QAbstractSocket::SocketError socketError)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "acceptError(QAbstractSocket::SocketError)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QWEBSOCKETSERVER");
    PHB_ITEM psocketError = hb_itemPutNI(NULL, static_cast<int>(socketError));

    hb_vmEvalBlockV(cb, 2, psender, psocketError);

    hb_itemRelease(psender);
    hb_itemRelease(psocketError);
  }
}
#endif

#if (QT_VERSION >= QT_VERSION_CHECK(5, 3, 0))
void QWebSocketServerSlots::serverError(QWebSocketProtocol::CloseCode closeCode)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "serverError(QWebSocketProtocol::CloseCode)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QWEBSOCKETSERVER");
    PHB_ITEM pcloseCode = hb_itemPutNI(NULL, static_cast<int>(closeCode));

    hb_vmEvalBlockV(cb, 2, psender, pcloseCode);

    hb_itemRelease(psender);
    hb_itemRelease(pcloseCode);
  }
}
#endif

#if (QT_VERSION >= QT_VERSION_CHECK(5, 3, 0))
void QWebSocketServerSlots::originAuthenticationRequired(QWebSocketCorsAuthenticator *pAuthenticator)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "originAuthenticationRequired(QWebSocketCorsAuthenticator*)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QWEBSOCKETSERVER");
    PHB_ITEM ppAuthenticator = Qt5xHb::Signals_return_object((void *)pAuthenticator, "QWEBSOCKETCORSAUTHENTICATOR");

    hb_vmEvalBlockV(cb, 2, psender, ppAuthenticator);

    hb_itemRelease(psender);
    hb_itemRelease(ppAuthenticator);
  }
}
#endif

#if (QT_VERSION >= QT_VERSION_CHECK(5, 3, 0))
void QWebSocketServerSlots::newConnection()
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "newConnection()");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QWEBSOCKETSERVER");

    hb_vmEvalBlockV(cb, 1, psender);

    hb_itemRelease(psender);
  }
}
#endif

#if (QT_VERSION >= QT_VERSION_CHECK(5, 3, 0))
void QWebSocketServerSlots::peerVerifyError(const QSslError &error)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "peerVerifyError(QSslError)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QWEBSOCKETSERVER");
    PHB_ITEM perror = Qt5xHb::Signals_return_object((void *)&error, "QSSLERROR");

    hb_vmEvalBlockV(cb, 2, psender, perror);

    hb_itemRelease(psender);
    hb_itemRelease(perror);
  }
}
#endif

#if (QT_VERSION >= QT_VERSION_CHECK(5, 3, 0))
void QWebSocketServerSlots::sslErrors(const QList<QSslError> &errors)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "sslErrors(QList<QSslError>)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QWEBSOCKETSERVER");
    PHB_DYNS pDynSym = hb_dynsymFindName("QSSLERROR");
    PHB_ITEM perrors = hb_itemArrayNew(0);
    if (pDynSym != NULL)
    {
      for (int i = 0; i < errors.count(); i++)
      {
        hb_vmPushDynSym(pDynSym);
        hb_vmPushNil();
        hb_vmDo(0);
        PHB_ITEM pTempObject = hb_itemNew(NULL);
        hb_itemCopy(pTempObject, hb_stackReturnItem());
        PHB_ITEM pTempItem = hb_itemPutPtr(NULL, new QSslError(errors[i]));
        hb_objSendMsg(pTempObject, "NEWFROMPOINTER", 1, pTempItem);
        hb_arrayAddForward(perrors, pTempObject);
        hb_itemRelease(pTempObject);
        hb_itemRelease(pTempItem);
      }
    }
    else
    {
      hb_errRT_BASE(EG_NOFUNC, 1001, NULL, "QSSLERROR", HB_ERR_ARGS_BASEPARAMS);
    }

    hb_vmEvalBlockV(cb, 2, psender, perrors);

    hb_itemRelease(psender);
    hb_itemRelease(perrors);
  }
}
#endif

#if (QT_VERSION >= QT_VERSION_CHECK(5, 3, 0))
void QWebSocketServerSlots::closed()
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "closed()");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QWEBSOCKETSERVER");

    hb_vmEvalBlockV(cb, 1, psender);

    hb_itemRelease(psender);
  }
}
#endif

void QWebSocketServerSlots_connect_signal(const QString &signal, const QString &slot)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 3, 0))
  QWebSocketServer *obj = (QWebSocketServer *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
    QWebSocketServerSlots *s = QCoreApplication::instance()->findChild<QWebSocketServerSlots *>();

    if (s == NULL)
    {
      s = new QWebSocketServerSlots();
      s->moveToThread(QCoreApplication::instance()->thread());
      s->setParent(QCoreApplication::instance());
    }

    hb_retl(Qt5xHb::Signals_connection_disconnection(s, signal, slot));
  }
  else
  {
    hb_retl(false);
  }
#else
  hb_retl(false);
#endif
}
