//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

#include "QCameraExposureSlots.hpp"

QCameraExposureSlots::QCameraExposureSlots(QObject *parent) : QObject(parent)
{
}

QCameraExposureSlots::~QCameraExposureSlots()
{
}

void QCameraExposureSlots::apertureChanged(qreal value)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "apertureChanged(qreal)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QCAMERAEXPOSURE");
    PHB_ITEM pvalue = hb_itemPutND(NULL, value);

    hb_vmEvalBlockV(cb, 2, psender, pvalue);

    hb_itemRelease(psender);
    hb_itemRelease(pvalue);
  }
}

void QCameraExposureSlots::apertureRangeChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "apertureRangeChanged()");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QCAMERAEXPOSURE");

    hb_vmEvalBlockV(cb, 1, psender);

    hb_itemRelease(psender);
  }
}

void QCameraExposureSlots::exposureCompensationChanged(qreal value)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "exposureCompensationChanged(qreal)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QCAMERAEXPOSURE");
    PHB_ITEM pvalue = hb_itemPutND(NULL, value);

    hb_vmEvalBlockV(cb, 2, psender, pvalue);

    hb_itemRelease(psender);
    hb_itemRelease(pvalue);
  }
}

void QCameraExposureSlots::flashReady(bool ready)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "flashReady(bool)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QCAMERAEXPOSURE");
    PHB_ITEM pready = hb_itemPutL(NULL, ready);

    hb_vmEvalBlockV(cb, 2, psender, pready);

    hb_itemRelease(psender);
    hb_itemRelease(pready);
  }
}

void QCameraExposureSlots::isoSensitivityChanged(int value)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "isoSensitivityChanged(int)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QCAMERAEXPOSURE");
    PHB_ITEM pvalue = hb_itemPutNI(NULL, value);

    hb_vmEvalBlockV(cb, 2, psender, pvalue);

    hb_itemRelease(psender);
    hb_itemRelease(pvalue);
  }
}

void QCameraExposureSlots::shutterSpeedChanged(qreal speed)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "shutterSpeedChanged(qreal)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QCAMERAEXPOSURE");
    PHB_ITEM pspeed = hb_itemPutND(NULL, speed);

    hb_vmEvalBlockV(cb, 2, psender, pspeed);

    hb_itemRelease(psender);
    hb_itemRelease(pspeed);
  }
}

void QCameraExposureSlots::shutterSpeedRangeChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "shutterSpeedRangeChanged()");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QCAMERAEXPOSURE");

    hb_vmEvalBlockV(cb, 1, psender);

    hb_itemRelease(psender);
  }
}

void QCameraExposureSlots_connect_signal(const QString &signal, const QString &slot)
{
  QCameraExposure *obj = (QCameraExposure *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
    QCameraExposureSlots *s = QCoreApplication::instance()->findChild<QCameraExposureSlots *>();

    if (s == NULL)
    {
      s = new QCameraExposureSlots();
      s->moveToThread(QCoreApplication::instance()->thread());
      s->setParent(QCoreApplication::instance());
    }

    hb_retl(Qt5xHb::Signals_connection_disconnection(s, signal, slot));
  }
  else
  {
    hb_retl(false);
  }
}
