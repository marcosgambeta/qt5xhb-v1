//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

// clang-format off

#include <hbclass.ch>

#ifndef QT5XHB_NO_REQUESTS
REQUEST QAUDIOBUFFER
REQUEST QAUDIOFORMAT
REQUEST QIODEVICE
#endif

CLASS QAudioDecoder INHERIT QMediaObject

   METHOD new
   METHOD delete
   METHOD sourceFilename
   METHOD setSourceFilename
   METHOD state
   METHOD errorString
   METHOD bufferAvailable
   METHOD audioFormat
   METHOD setAudioFormat
   METHOD duration
   METHOD error
   METHOD position
   METHOD read
   METHOD sourceDevice
   METHOD setSourceDevice
   METHOD start
   METHOD stop
   METHOD hasSupport
   METHOD bind
   METHOD unbind

   METHOD onBufferAvailableChanged
   METHOD onBufferReady
   METHOD onDurationChanged
   METHOD onError
   METHOD onFinished
   METHOD onFormatChanged
   METHOD onPositionChanged
   METHOD onSourceChanged
   METHOD onStateChanged

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QAudioDecoder
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

// clang-format on

#pragma BEGINDUMP

#include <QtCore/Qt>

#ifndef __XHARBOUR__
#include <QtMultimedia/QAudioDecoder>
#endif

#include "qt5xhb_common.hpp"
#include "qt5xhb_macros.hpp"
#include "qt5xhb_utils.hpp"
#include "qt5xhb_events.hpp"
#include "qt5xhb_signals.hpp"

#ifdef __XHARBOUR__
#include <QtMultimedia/QAudioDecoder>
#endif

    /*
    QAudioDecoder( QObject * parent = nullptr )
    */
HB_FUNC_STATIC(QAUDIODECODER_NEW)
{
  if (ISBETWEEN(0, 1) && ISQOBJECTORNIL(1))
  {
    QAudioDecoder *obj = new QAudioDecoder(OPQOBJECT(1, nullptr));
    Qt5xHb::returnNewObject(obj, false);
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

/*
~QAudioDecoder()
*/
HB_FUNC_STATIC(QAUDIODECODER_DELETE)
{
  QAudioDecoder *obj = (QAudioDecoder *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
    Qt5xHb::Events_disconnect_all_events(obj, true);
    Qt5xHb::Signals_disconnect_all_signals(obj, true);
    delete obj;
    obj = NULL;
    PHB_ITEM ptr = hb_itemPutPtr(NULL, NULL);
    hb_objSendMsg(hb_stackSelfItem(), "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
QString sourceFilename() const
*/
HB_FUNC_STATIC(QAUDIODECODER_SOURCEFILENAME)
{
  QAudioDecoder *obj = (QAudioDecoder *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RQSTRING(obj->sourceFilename());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void setSourceFilename( const QString &fileName )
*/
HB_FUNC_STATIC(QAUDIODECODER_SETSOURCEFILENAME)
{
  QAudioDecoder *obj = (QAudioDecoder *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISCHAR(1))
    {
#endif
      obj->setSourceFilename(PQSTRING(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
QAudioDecoder::State state() const
*/
HB_FUNC_STATIC(QAUDIODECODER_STATE)
{
  QAudioDecoder *obj = (QAudioDecoder *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RENUM(obj->state());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QString errorString() const
*/
HB_FUNC_STATIC(QAUDIODECODER_ERRORSTRING)
{
  QAudioDecoder *obj = (QAudioDecoder *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RQSTRING(obj->errorString());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
bool bufferAvailable() const
*/
HB_FUNC_STATIC(QAUDIODECODER_BUFFERAVAILABLE)
{
  QAudioDecoder *obj = (QAudioDecoder *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RBOOL(obj->bufferAvailable());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QAudioFormat audioFormat() const
*/
HB_FUNC_STATIC(QAUDIODECODER_AUDIOFORMAT)
{
  QAudioDecoder *obj = (QAudioDecoder *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QAudioFormat *ptr = new QAudioFormat(obj->audioFormat());
      Qt5xHb::createReturnClass(ptr, "QAUDIOFORMAT", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void setAudioFormat( const QAudioFormat &format )
*/
HB_FUNC_STATIC(QAUDIODECODER_SETAUDIOFORMAT)
{
  QAudioDecoder *obj = (QAudioDecoder *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQAUDIOFORMAT(1))
    {
#endif
      obj->setAudioFormat(*PQAUDIOFORMAT(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
qint64 duration() const
*/
HB_FUNC_STATIC(QAUDIODECODER_DURATION)
{
  QAudioDecoder *obj = (QAudioDecoder *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RQINT64(obj->duration());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QAudioDecoder::Error error() const
*/
HB_FUNC_STATIC(QAUDIODECODER_ERROR)
{
  QAudioDecoder *obj = (QAudioDecoder *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RENUM(obj->error());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
qint64 position() const
*/
HB_FUNC_STATIC(QAUDIODECODER_POSITION)
{
  QAudioDecoder *obj = (QAudioDecoder *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RQINT64(obj->position());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QAudioBuffer read() const
*/
HB_FUNC_STATIC(QAUDIODECODER_READ)
{
  QAudioDecoder *obj = (QAudioDecoder *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QAudioBuffer *ptr = new QAudioBuffer(obj->read());
      Qt5xHb::createReturnClass(ptr, "QAUDIOBUFFER", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QIODevice * sourceDevice() const
*/
HB_FUNC_STATIC(QAUDIODECODER_SOURCEDEVICE)
{
  QAudioDecoder *obj = (QAudioDecoder *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QIODevice *ptr = obj->sourceDevice();
      Qt5xHb::createReturnQObjectClass(ptr, "QIODEVICE");
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void setSourceDevice( QIODevice * device )
*/
HB_FUNC_STATIC(QAUDIODECODER_SETSOURCEDEVICE)
{
  QAudioDecoder *obj = (QAudioDecoder *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQIODEVICE(1))
    {
#endif
      obj->setSourceDevice(PQIODEVICE(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
void start()
*/
HB_FUNC_STATIC(QAUDIODECODER_START)
{
  QAudioDecoder *obj = (QAudioDecoder *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      obj->start();
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
void stop()
*/
HB_FUNC_STATIC(QAUDIODECODER_STOP)
{
  QAudioDecoder *obj = (QAudioDecoder *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      obj->stop();
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
static QMultimedia::SupportEstimate hasSupport( const QString &mimeType, const QStringList &codecs = QStringList() )
*/
HB_FUNC_STATIC(QAUDIODECODER_HASSUPPORT)
{
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
  if (ISBETWEEN(1, 2) && HB_ISCHAR(1) && (HB_ISARRAY(2) || HB_ISNIL(2)))
  {
#endif
    RENUM(QAudioDecoder::hasSupport(PQSTRING(1), OPQSTRINGLIST(2, QStringList())));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
#endif
}

/*
bool bind( QObject * ) override
*/
HB_FUNC_STATIC(QAUDIODECODER_BIND)
{
  QAudioDecoder *obj = (QAudioDecoder *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQOBJECT(1))
    {
#endif
      RBOOL(obj->bind(PQOBJECT(1)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void unbind( QObject * ) override
*/
HB_FUNC_STATIC(QAUDIODECODER_UNBIND)
{
  QAudioDecoder *obj = (QAudioDecoder *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQOBJECT(1))
    {
#endif
      obj->unbind(PQOBJECT(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

void QAudioDecoderSlots_connect_signal(const QString &signal, const QString &slot);

HB_FUNC_STATIC(QAUDIODECODER_ONBUFFERAVAILABLECHANGED)
{
  QAudioDecoderSlots_connect_signal("bufferAvailableChanged(bool)", "bufferAvailableChanged(bool)");
}

HB_FUNC_STATIC(QAUDIODECODER_ONBUFFERREADY)
{
  QAudioDecoderSlots_connect_signal("bufferReady()", "bufferReady()");
}

HB_FUNC_STATIC(QAUDIODECODER_ONDURATIONCHANGED)
{
  QAudioDecoderSlots_connect_signal("durationChanged(qint64)", "durationChanged(qint64)");
}

HB_FUNC_STATIC(QAUDIODECODER_ONERROR)
{
  QAudioDecoderSlots_connect_signal("error(QAudioDecoder::Error)", "error(QAudioDecoder::Error)");
}

HB_FUNC_STATIC(QAUDIODECODER_ONFINISHED)
{
  QAudioDecoderSlots_connect_signal("finished()", "finished()");
}

HB_FUNC_STATIC(QAUDIODECODER_ONFORMATCHANGED)
{
  QAudioDecoderSlots_connect_signal("formatChanged(QAudioFormat)", "formatChanged(QAudioFormat)");
}

HB_FUNC_STATIC(QAUDIODECODER_ONPOSITIONCHANGED)
{
  QAudioDecoderSlots_connect_signal("positionChanged(qint64)", "positionChanged(qint64)");
}

HB_FUNC_STATIC(QAUDIODECODER_ONSOURCECHANGED)
{
  QAudioDecoderSlots_connect_signal("sourceChanged()", "sourceChanged()");
}

HB_FUNC_STATIC(QAUDIODECODER_ONSTATECHANGED)
{
  QAudioDecoderSlots_connect_signal("stateChanged(QAudioDecoder::State)", "stateChanged(QAudioDecoder::State)");
}

#pragma ENDDUMP
