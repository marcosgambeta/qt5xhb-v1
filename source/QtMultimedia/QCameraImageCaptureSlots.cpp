//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

#include "QCameraImageCaptureSlots.hpp"

QCameraImageCaptureSlots::QCameraImageCaptureSlots(QObject *parent) : QObject(parent)
{
}

QCameraImageCaptureSlots::~QCameraImageCaptureSlots()
{
}

void QCameraImageCaptureSlots::bufferFormatChanged(QVideoFrame::PixelFormat format)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "bufferFormatChanged(QVideoFrame::PixelFormat)");

  if (cb != NULL) {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QCAMERAIMAGECAPTURE");
    PHB_ITEM pformat = hb_itemPutNI(NULL, static_cast<int>(format));

    hb_vmEvalBlockV(cb, 2, psender, pformat);

    hb_itemRelease(psender);
    hb_itemRelease(pformat);
  }
}

void QCameraImageCaptureSlots::captureDestinationChanged(QCameraImageCapture::CaptureDestinations destination)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb =
      Qt5xHb::Signals_return_codeblock(object, "captureDestinationChanged(QCameraImageCapture::CaptureDestinations)");

  if (cb != NULL) {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QCAMERAIMAGECAPTURE");
    PHB_ITEM pdestination = hb_itemPutNI(NULL, static_cast<int>(destination));

    hb_vmEvalBlockV(cb, 2, psender, pdestination);

    hb_itemRelease(psender);
    hb_itemRelease(pdestination);
  }
}

void QCameraImageCaptureSlots::error(int id, QCameraImageCapture::Error error, const QString &errorString)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "error(int,QCameraImageCapture::Error,QString)");

  if (cb != NULL) {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QCAMERAIMAGECAPTURE");
    PHB_ITEM pid = hb_itemPutNI(NULL, id);
    PHB_ITEM perror = hb_itemPutNI(NULL, static_cast<int>(error));
    PHB_ITEM perrorString = hb_itemPutC(NULL, QSTRINGTOSTRING(errorString));

    hb_vmEvalBlockV(cb, 4, psender, pid, perror, perrorString);

    hb_itemRelease(psender);
    hb_itemRelease(pid);
    hb_itemRelease(perror);
    hb_itemRelease(perrorString);
  }
}

void QCameraImageCaptureSlots::imageAvailable(int id, const QVideoFrame &buffer)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "imageAvailable(int,QVideoFrame)");

  if (cb != NULL) {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QCAMERAIMAGECAPTURE");
    PHB_ITEM pid = hb_itemPutNI(NULL, id);
    PHB_ITEM pbuffer = Qt5xHb::Signals_return_object((void *)&buffer, "QVIDEOFRAME");

    hb_vmEvalBlockV(cb, 3, psender, pid, pbuffer);

    hb_itemRelease(psender);
    hb_itemRelease(pid);
    hb_itemRelease(pbuffer);
  }
}

void QCameraImageCaptureSlots::imageCaptured(int id, const QImage &preview)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "imageCaptured(int,QImage)");

  if (cb != NULL) {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QCAMERAIMAGECAPTURE");
    PHB_ITEM pid = hb_itemPutNI(NULL, id);
    PHB_ITEM ppreview = Qt5xHb::Signals_return_object((void *)&preview, "QIMAGE");

    hb_vmEvalBlockV(cb, 3, psender, pid, ppreview);

    hb_itemRelease(psender);
    hb_itemRelease(pid);
    hb_itemRelease(ppreview);
  }
}

void QCameraImageCaptureSlots::imageExposed(int id)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "imageExposed(int)");

  if (cb != NULL) {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QCAMERAIMAGECAPTURE");
    PHB_ITEM pid = hb_itemPutNI(NULL, id);

    hb_vmEvalBlockV(cb, 2, psender, pid);

    hb_itemRelease(psender);
    hb_itemRelease(pid);
  }
}

void QCameraImageCaptureSlots::imageMetadataAvailable(int id, const QString &key, const QVariant &value)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "imageMetadataAvailable(int,QString,QVariant)");

  if (cb != NULL) {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QCAMERAIMAGECAPTURE");
    PHB_ITEM pid = hb_itemPutNI(NULL, id);
    PHB_ITEM pkey = hb_itemPutC(NULL, QSTRINGTOSTRING(key));
    PHB_ITEM pvalue = Qt5xHb::Signals_return_object((void *)&value, "QVARIANT");

    hb_vmEvalBlockV(cb, 4, psender, pid, pkey, pvalue);

    hb_itemRelease(psender);
    hb_itemRelease(pid);
    hb_itemRelease(pkey);
    hb_itemRelease(pvalue);
  }
}

void QCameraImageCaptureSlots::imageSaved(int id, const QString &fileName)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "imageSaved(int,QString)");

  if (cb != NULL) {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QCAMERAIMAGECAPTURE");
    PHB_ITEM pid = hb_itemPutNI(NULL, id);
    PHB_ITEM pfileName = hb_itemPutC(NULL, QSTRINGTOSTRING(fileName));

    hb_vmEvalBlockV(cb, 3, psender, pid, pfileName);

    hb_itemRelease(psender);
    hb_itemRelease(pid);
    hb_itemRelease(pfileName);
  }
}

void QCameraImageCaptureSlots::readyForCaptureChanged(bool ready)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "readyForCaptureChanged(bool)");

  if (cb != NULL) {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QCAMERAIMAGECAPTURE");
    PHB_ITEM pready = hb_itemPutL(NULL, ready);

    hb_vmEvalBlockV(cb, 2, psender, pready);

    hb_itemRelease(psender);
    hb_itemRelease(pready);
  }
}

void QCameraImageCaptureSlots_connect_signal(const QString &signal, const QString &slot)
{
  QCameraImageCapture *obj = (QCameraImageCapture *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
    QCameraImageCaptureSlots *s = QCoreApplication::instance()->findChild<QCameraImageCaptureSlots *>();

    if (s == NULL) {
      s = new QCameraImageCaptureSlots();
      s->moveToThread(QCoreApplication::instance()->thread());
      s->setParent(QCoreApplication::instance());
    }

    hb_retl(Qt5xHb::Signals_connection_disconnection(s, signal, slot));
  } else {
    hb_retl(false);
  }
}
