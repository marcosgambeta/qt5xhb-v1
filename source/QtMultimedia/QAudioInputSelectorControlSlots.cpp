//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

#include "QAudioInputSelectorControlSlots.hpp"

QAudioInputSelectorControlSlots::QAudioInputSelectorControlSlots(QObject *parent) : QObject(parent)
{
}

QAudioInputSelectorControlSlots::~QAudioInputSelectorControlSlots()
{
}

void QAudioInputSelectorControlSlots::activeInputChanged(const QString &name)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "activeInputChanged(QString)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QAUDIOINPUTSELECTORCONTROL");
    PHB_ITEM pname = hb_itemPutC(NULL, QSTRINGTOSTRING(name));

    hb_vmEvalBlockV(cb, 2, psender, pname);

    hb_itemRelease(psender);
    hb_itemRelease(pname);
  }
}

void QAudioInputSelectorControlSlots::availableInputsChanged()
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "availableInputsChanged()");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QAUDIOINPUTSELECTORCONTROL");

    hb_vmEvalBlockV(cb, 1, psender);

    hb_itemRelease(psender);
  }
}

void QAudioInputSelectorControlSlots_connect_signal(const QString &signal, const QString &slot)
{
  QAudioInputSelectorControl *obj = (QAudioInputSelectorControl *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
    QAudioInputSelectorControlSlots *s = QCoreApplication::instance()->findChild<QAudioInputSelectorControlSlots *>();

    if (s == NULL)
    {
      s = new QAudioInputSelectorControlSlots();
      s->moveToThread(QCoreApplication::instance()->thread());
      s->setParent(QCoreApplication::instance());
    }

    hb_retl(Qt5xHb::Signals_connection_disconnection(s, signal, slot));
  }
  else
  {
    hb_retl(false);
  }
}
