//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

#include "QCameraSlots.hpp"

QCameraSlots::QCameraSlots(QObject *parent) : QObject(parent)
{
}

QCameraSlots::~QCameraSlots()
{
}

void QCameraSlots::captureModeChanged(QCamera::CaptureModes mode)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "captureModeChanged(QCamera::CaptureModes)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QCAMERA");
    PHB_ITEM pmode = hb_itemPutNI(NULL, static_cast<int>(mode));

    hb_vmEvalBlockV(cb, 2, psender, pmode);

    hb_itemRelease(psender);
    hb_itemRelease(pmode);
  }
}

void QCameraSlots::error(QCamera::Error value)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "error(QCamera::Error)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QCAMERA");
    PHB_ITEM pvalue = hb_itemPutNI(NULL, static_cast<int>(value));

    hb_vmEvalBlockV(cb, 2, psender, pvalue);

    hb_itemRelease(psender);
    hb_itemRelease(pvalue);
  }
}

void QCameraSlots::lockFailed()
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "lockFailed()");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QCAMERA");

    hb_vmEvalBlockV(cb, 1, psender);

    hb_itemRelease(psender);
  }
}

void QCameraSlots::lockStatusChanged(QCamera::LockStatus status, QCamera::LockChangeReason reason)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb =
      Qt5xHb::Signals_return_codeblock(object, "lockStatusChanged(QCamera::LockStatus,QCamera::LockChangeReason)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QCAMERA");
    PHB_ITEM pstatus = hb_itemPutNI(NULL, static_cast<int>(status));
    PHB_ITEM preason = hb_itemPutNI(NULL, static_cast<int>(reason));

    hb_vmEvalBlockV(cb, 3, psender, pstatus, preason);

    hb_itemRelease(psender);
    hb_itemRelease(pstatus);
    hb_itemRelease(preason);
  }
}

void QCameraSlots::lockStatusChanged(QCamera::LockType lock, QCamera::LockStatus status,
                                     QCamera::LockChangeReason reason)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(
      object, "lockStatusChanged(QCamera::LockType,QCamera::LockStatus,QCamera::LockChangeReason)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QCAMERA");
    PHB_ITEM plock = hb_itemPutNI(NULL, static_cast<int>(lock));
    PHB_ITEM pstatus = hb_itemPutNI(NULL, static_cast<int>(status));
    PHB_ITEM preason = hb_itemPutNI(NULL, static_cast<int>(reason));

    hb_vmEvalBlockV(cb, 4, psender, plock, pstatus, preason);

    hb_itemRelease(psender);
    hb_itemRelease(plock);
    hb_itemRelease(pstatus);
    hb_itemRelease(preason);
  }
}

void QCameraSlots::locked()
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "locked()");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QCAMERA");

    hb_vmEvalBlockV(cb, 1, psender);

    hb_itemRelease(psender);
  }
}

void QCameraSlots::stateChanged(QCamera::State state)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "stateChanged(QCamera::State)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QCAMERA");
    PHB_ITEM pstate = hb_itemPutNI(NULL, static_cast<int>(state));

    hb_vmEvalBlockV(cb, 2, psender, pstate);

    hb_itemRelease(psender);
    hb_itemRelease(pstate);
  }
}

void QCameraSlots::statusChanged(QCamera::Status status)
{
  QObject *object = qobject_cast<QObject *>(sender());

  PHB_ITEM cb = Qt5xHb::Signals_return_codeblock(object, "statusChanged(QCamera::Status)");

  if (cb != NULL)
  {
    PHB_ITEM psender = Qt5xHb::Signals_return_qobject(object, "QCAMERA");
    PHB_ITEM pstatus = hb_itemPutNI(NULL, static_cast<int>(status));

    hb_vmEvalBlockV(cb, 2, psender, pstatus);

    hb_itemRelease(psender);
    hb_itemRelease(pstatus);
  }
}

void QCameraSlots_connect_signal(const QString &signal, const QString &slot)
{
  QCamera *obj = (QCamera *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
    QCameraSlots *s = QCoreApplication::instance()->findChild<QCameraSlots *>();

    if (s == NULL)
    {
      s = new QCameraSlots();
      s->moveToThread(QCoreApplication::instance()->thread());
      s->setParent(QCoreApplication::instance());
    }

    hb_retl(Qt5xHb::Signals_connection_disconnection(s, signal, slot));
  }
  else
  {
    hb_retl(false);
  }
}
