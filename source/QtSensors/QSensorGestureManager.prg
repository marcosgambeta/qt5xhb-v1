//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

// clang-format off

#include "hbclass.ch"

#ifndef QT5XHB_NO_REQUESTS
REQUEST QSENSORGESTURERECOGNIZER
#endif

CLASS QSensorGestureManager INHERIT QObject

   METHOD new
   METHOD delete
   METHOD registerSensorGestureRecognizer
   METHOD gestureIds
   METHOD recognizerSignals
   METHOD sensorGestureRecognizer

   METHOD onNewSensorGestureAvailable

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QSensorGestureManager
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

// clang-format on

#pragma BEGINDUMP

#include <QtCore/Qt>

#ifndef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5, 1, 0))
#include <QtSensors/QSensorGestureManager>
#endif
#endif

#include "qt5xhb_common.hpp"
#include "qt5xhb_macros.hpp"
#include "qt5xhb_utils.hpp"
#include "qt5xhb_events.hpp"
#include "qt5xhb_signals.hpp"

#ifdef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5, 1, 0))
#include <QtSensors/QSensorGestureManager>
#endif
#endif

    /*
    QSensorGestureManager( QObject * parent = 0 )
    */
HB_FUNC_STATIC(QSENSORGESTUREMANAGER_NEW)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 1, 0))
  if (ISBETWEEN(0, 1) && (ISQOBJECT(1) || HB_ISNIL(1)))
  {
    QSensorGestureManager *obj = new QSensorGestureManager(OPQOBJECT(1, 0));
    Qt5xHb::returnNewObject(obj, false);
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
#endif
}

HB_FUNC_STATIC(QSENSORGESTUREMANAGER_DELETE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 1, 0))
  QSensorGestureManager *obj = (QSensorGestureManager *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
    Qt5xHb::Events_disconnect_all_events(obj, true);
    Qt5xHb::Signals_disconnect_all_signals(obj, true);
    delete obj;
    obj = NULL;
    PHB_ITEM ptr = hb_itemPutPtr(NULL, NULL);
    hb_objSendMsg(hb_stackSelfItem(), "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
bool registerSensorGestureRecognizer( QSensorGestureRecognizer * recognizer )
*/
HB_FUNC_STATIC(QSENSORGESTUREMANAGER_REGISTERSENSORGESTURERECOGNIZER)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 1, 0))
  QSensorGestureManager *obj = (QSensorGestureManager *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQSENSORGESTURERECOGNIZER(1))
    {
#endif
      RBOOL(obj->registerSensorGestureRecognizer(PQSENSORGESTURERECOGNIZER(1)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
QStringList gestureIds() const
*/
HB_FUNC_STATIC(QSENSORGESTUREMANAGER_GESTUREIDS)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 1, 0))
  QSensorGestureManager *obj = (QSensorGestureManager *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RQSTRINGLIST(obj->gestureIds());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
QStringList recognizerSignals( const QString &recognizerId ) const
*/
HB_FUNC_STATIC(QSENSORGESTUREMANAGER_RECOGNIZERSIGNALS)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 1, 0))
  QSensorGestureManager *obj = (QSensorGestureManager *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISCHAR(1))
    {
#endif
      RQSTRINGLIST(obj->recognizerSignals(PQSTRING(1)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
static QSensorGestureRecognizer * sensorGestureRecognizer( const QString &id )
*/
HB_FUNC_STATIC(QSENSORGESTUREMANAGER_SENSORGESTURERECOGNIZER)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 1, 0))
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
  if (ISNUMPAR(1) && HB_ISCHAR(1))
  {
#endif
    QSensorGestureRecognizer *ptr = QSensorGestureManager::sensorGestureRecognizer(PQSTRING(1));
    Qt5xHb::createReturnQObjectClass(ptr, "QSENSORGESTURERECOGNIZER");
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
#endif
#endif
}

void QSensorGestureManagerSlots_connect_signal(const QString &signal, const QString &slot);

HB_FUNC_STATIC(QSENSORGESTUREMANAGER_ONNEWSENSORGESTUREAVAILABLE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 1, 0))
  QSensorGestureManagerSlots_connect_signal("newSensorGestureAvailable()", "newSensorGestureAvailable()");
#else
  hb_retl(false);
#endif
}

#pragma ENDDUMP
