//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

// clang-format off

#include <hbclass.ch>

#ifndef QT5XHB_NO_REQUESTS
#endif

CLASS QSaveFile INHERIT QFileDevice

   METHOD new
   METHOD delete
   METHOD fileName
   METHOD setFileName
   METHOD open
   METHOD commit
   METHOD cancelWriting
   METHOD setDirectWriteFallback
   METHOD directWriteFallback

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QSaveFile
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

// clang-format on

#pragma BEGINDUMP

#include <QtCore/Qt>

#ifndef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5, 1, 0))
#include <QtCore/QSaveFile>
#endif
#endif

#include "qt5xhb_common.hpp"
#include "qt5xhb_macros.hpp"
#include "qt5xhb_utils.hpp"
#include "qt5xhb_events.hpp"
#include "qt5xhb_signals.hpp"

#ifdef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5, 1, 0))
#include <QtCore/QSaveFile>
#endif
#endif

HB_FUNC_STATIC(QSAVEFILE_NEW)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 1, 0))
  if (ISNUMPAR(1) && HB_ISCHAR(1))
  {
    /*
    QSaveFile( const QString &name )
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 1, 0))
    QSaveFile *obj = new QSaveFile(PQSTRING(1));
    Qt5xHb::returnNewObject(obj, false);
#endif
  }
  else if (ISBETWEEN(0, 1) && (ISQOBJECT(1) || HB_ISNIL(1)))
  {
    /*
    QSaveFile( QObject * parent = 0 )
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 1, 0))
    QSaveFile *obj = new QSaveFile(OPQOBJECT(1, 0));
    Qt5xHb::returnNewObject(obj, false);
#endif
  }
  else if (ISNUMPAR(2) && HB_ISCHAR(1) && ISQOBJECT(2))
  {
    /*
    QSaveFile( const QString &name, QObject * parent )
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 1, 0))
    QSaveFile *obj = new QSaveFile(PQSTRING(1), PQOBJECT(2));
    Qt5xHb::returnNewObject(obj, false);
#endif
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
#endif
}

HB_FUNC_STATIC(QSAVEFILE_DELETE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 1, 0))
  QSaveFile *obj = (QSaveFile *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
    Qt5xHb::Events_disconnect_all_events(obj, true);
    Qt5xHb::Signals_disconnect_all_signals(obj, true);
    delete obj;
    obj = NULL;
    PHB_ITEM ptr = hb_itemPutPtr(NULL, NULL);
    hb_objSendMsg(hb_stackSelfItem(), "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QString fileName() const
*/
HB_FUNC_STATIC(QSAVEFILE_FILENAME)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 1, 0))
  QSaveFile *obj = (QSaveFile *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RQSTRING(obj->fileName());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setFileName( const QString &name )
*/
HB_FUNC_STATIC(QSAVEFILE_SETFILENAME)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 1, 0))
  QSaveFile *obj = (QSaveFile *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISCHAR(1))
    {
#endif
      obj->setFileName(PQSTRING(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
bool open( QIODevice::OpenMode flags )
*/
HB_FUNC_STATIC(QSAVEFILE_OPEN)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 1, 0))
  QSaveFile *obj = (QSaveFile *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      RBOOL(obj->open((QIODevice::OpenMode)hb_parni(1)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
bool commit()
*/
HB_FUNC_STATIC(QSAVEFILE_COMMIT)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 1, 0))
  QSaveFile *obj = (QSaveFile *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RBOOL(obj->commit());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void cancelWriting()
*/
HB_FUNC_STATIC(QSAVEFILE_CANCELWRITING)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 1, 0))
  QSaveFile *obj = (QSaveFile *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      obj->cancelWriting();
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
void setDirectWriteFallback( bool enabled )
*/
HB_FUNC_STATIC(QSAVEFILE_SETDIRECTWRITEFALLBACK)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 1, 0))
  QSaveFile *obj = (QSaveFile *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISLOG(1))
    {
#endif
      obj->setDirectWriteFallback(PBOOL(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
bool directWriteFallback() const
*/
HB_FUNC_STATIC(QSAVEFILE_DIRECTWRITEFALLBACK)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 1, 0))
  QSaveFile *obj = (QSaveFile *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RBOOL(obj->directWriteFallback());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

#pragma ENDDUMP
