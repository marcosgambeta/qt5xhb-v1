//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta AT outlook DOT com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

// clang-format off

#include "hbclass.ch"

#ifndef QT5XHB_NO_REQUESTS
REQUEST QBITARRAY
REQUEST QBYTEARRAY
REQUEST QCHAR
REQUEST QDATE
REQUEST QDATETIME
REQUEST QEASINGCURVE
REQUEST QJSONARRAY
REQUEST QJSONDOCUMENT
REQUEST QJSONOBJECT
REQUEST QJSONVALUE
REQUEST QLINE
REQUEST QLINEF
REQUEST QLOCALE
REQUEST QMODELINDEX
REQUEST QPOINT
REQUEST QPOINTF
REQUEST QRECT
REQUEST QRECTF
REQUEST QREGEXP
REQUEST QREGULAREXPRESSION
REQUEST QSIZE
REQUEST QSIZEF
REQUEST QTIME
REQUEST QURL
REQUEST QUUID
#endif

CLASS QVariant

   DATA pointer
   DATA self_destruction INIT .F.

   METHOD new
   METHOD new2
   METHOD new7
   METHOD new8
   METHOD new9
   METHOD new10
   METHOD new12
   METHOD new13
   METHOD new14
   METHOD new17
   METHOD new19
   METHOD new24
   METHOD delete
   METHOD swap
   METHOD type
   METHOD userType
   METHOD typeName
   METHOD canConvert
   METHOD convert
   METHOD isValid
   METHOD isNull
   METHOD clear
   METHOD detach
   METHOD isDetached
   METHOD toInt
   METHOD toUInt
   METHOD toLongLong
   METHOD toULongLong
   METHOD toBool
   METHOD toDouble
   METHOD toFloat
   METHOD toReal
   METHOD toByteArray
   METHOD toBitArray
   METHOD toString
   METHOD toStringList
   METHOD toChar
   METHOD toDate
   METHOD toTime
   METHOD toDateTime
   METHOD toList
   METHOD toPoint
   METHOD toPointF
   METHOD toRect
   METHOD toRectF
   METHOD toSize
   METHOD toSizeF
   METHOD toLine
   METHOD toLineF
   METHOD toLocale
   METHOD toRegExp
   METHOD toRegularExpression
   METHOD toUrl
   METHOD toEasingCurve
   METHOD toUuid
   METHOD toModelIndex
   METHOD toJsonValue
   METHOD toJsonObject
   METHOD toJsonArray
   METHOD toJsonDocument
   METHOD load
   METHOD save
   METHOD data
   METHOD typeToName
   METHOD nameToType

   METHOD newFrom
   METHOD newFromObject
   METHOD newFromPointer
   METHOD selfDestruction
   METHOD setSelfDestruction

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QVariant
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

// clang-format on

#pragma BEGINDUMP

#include <QtCore/Qt>

#ifndef __XHARBOUR__
#include <QtCore/QVariant>
#endif

#include "qt5xhb_common.hpp"
#include "qt5xhb_macros.hpp"
#include "qt5xhb_utils.hpp"

#ifdef __XHARBOUR__
#include <QtCore/QVariant>
#endif

#include <QtCore/QDataStream>
#include <QtCore/QByteArray>
#include <QtCore/QBitArray>
#include <QtCore/QString>
#include <QtCore/QLatin1String>
#include <QtCore/QStringList>
#include <QtCore/QChar>
#include <QtCore/QDate>
#include <QtCore/QTime>
#include <QtCore/QDateTime>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QHash>
#include <QtCore/QSize>
#include <QtCore/QSizeF>
#include <QtCore/QPoint>
#include <QtCore/QPointF>
#include <QtCore/QLine>
#include <QtCore/QLineF>
#include <QtCore/QRect>
#include <QtCore/QRectF>
#include <QtCore/QLocale>
#include <QtCore/QRegExp>
#include <QtCore/QRegularExpression>
#include <QtCore/QUrl>
#include <QtCore/QEasingCurve>
#include <QtCore/QUuid>
#include <QtCore/QModelIndex>
#include <QtCore/QJsonValue>
#include <QtCore/QJsonObject>
#include <QtCore/QJsonArray>
#include <QtCore/QJsonDocument>

    /*
    QVariant( QVariant::Type type )
    */
HB_FUNC_STATIC(QVARIANT_NEW2)
{
  QVariant *obj = new QVariant((QVariant::Type)hb_parni(1));
  Qt5xHb::returnNewObject(obj, true);
}

/*
QVariant( int i )
*/
HB_FUNC_STATIC(QVARIANT_NEW7)
{
  QVariant *obj = new QVariant(PINT(1));
  Qt5xHb::returnNewObject(obj, true);
}

/*
QVariant( uint ui )
*/
HB_FUNC_STATIC(QVARIANT_NEW8)
{
  QVariant *obj = new QVariant(PUINT(1));
  Qt5xHb::returnNewObject(obj, true);
}

/*
QVariant( qlonglong ll )
*/
HB_FUNC_STATIC(QVARIANT_NEW9)
{
  QVariant *obj = new QVariant(PQLONGLONG(1));
  Qt5xHb::returnNewObject(obj, true);
}

/*
QVariant( qulonglong ull )
*/
HB_FUNC_STATIC(QVARIANT_NEW10)
{
  QVariant *obj = new QVariant(PQULONGLONG(1));
  Qt5xHb::returnNewObject(obj, true);
}

/*
QVariant( double d )
*/
HB_FUNC_STATIC(QVARIANT_NEW12)
{
  QVariant *obj = new QVariant(PDOUBLE(1));
  Qt5xHb::returnNewObject(obj, true);
}

/*
QVariant( float f )
*/
HB_FUNC_STATIC(QVARIANT_NEW13)
{
  QVariant *obj = new QVariant(PFLOAT(1));
  Qt5xHb::returnNewObject(obj, true);
}

/*
QVariant(const char *str)
*/
HB_FUNC_STATIC(QVARIANT_NEW14)
{
#ifndef QT_NO_CAST_FROM_ASCII
  QVariant *obj = new QVariant(PCONSTCHAR(1));
  Qt5xHb::returnNewObject(obj, true);
#endif
}

/*
QVariant( const QString &string )
*/
HB_FUNC_STATIC(QVARIANT_NEW17)
{
  QVariant *obj = new QVariant(PQSTRING(1));
  Qt5xHb::returnNewObject(obj, true);
}

/*
QVariant( const QStringList &stringlist )
*/
HB_FUNC_STATIC(QVARIANT_NEW19)
{
  QVariant *obj = new QVariant(PQSTRINGLIST(1));
  Qt5xHb::returnNewObject(obj, true);
}

/*
QVariant( const QList<QVariant> &list )
*/
HB_FUNC_STATIC(QVARIANT_NEW24)
{
  QList<QVariant> par1;
  PHB_ITEM aList1 = hb_param(1, HB_IT_ARRAY);
  int nLen1 = hb_arrayLen(aList1);
  for (int i1 = 0; i1 < nLen1; i1++)
  {
    par1 << *(QVariant *)hb_itemGetPtr(hb_objSendMsg(hb_arrayGetItemPtr(aList1, i1 + 1), "POINTER", 0));
  }
  QVariant *obj = new QVariant(par1);
  Qt5xHb::returnNewObject(obj, true);
}

HB_FUNC_STATIC(QVARIANT_NEW)
{
  if (ISNUMPAR(0))
  {
    /*
    QVariant()
    */
    QVariant *obj = new QVariant();
    Qt5xHb::returnNewObject(obj, true);
  }
  else if (ISNUMPAR(1) && HB_ISOBJECT(1))
  {
    if (ISQVARIANT(1))
    {
      /*
      QVariant( const QVariant &other )
      */
      QVariant *obj = new QVariant(*PQVARIANT(1));
      Qt5xHb::returnNewObject(obj, true);
    }
    else if (ISQDATASTREAM(1))
    {
      /*
      QVariant(QDataStream &s)
      */
#ifndef QT_NO_DATASTREAM
      QDataStream *par1 = (QDataStream *)Qt5xHb::itemGetPtr(1);
      QVariant *o = new QVariant(*par1);
      Qt5xHb::returnNewObject(o, true);
#endif
    }
    else if (ISQBYTEARRAY(1))
    {
      /*
      QVariant( const QByteArray &bytearray )
      */
      QVariant *obj = new QVariant(*PQBYTEARRAY(1));
      Qt5xHb::returnNewObject(obj, true);
    }
    else if (ISQBITARRAY(1))
    {
      /*
      QVariant( const QBitArray &bitarray )
      */
      QVariant *obj = new QVariant(*PQBITARRAY(1));
      Qt5xHb::returnNewObject(obj, true);
    }
    else if (ISQLATIN1STRING(1))
    {
      /*
      QVariant( QLatin1String string )
      */
      QVariant *obj = new QVariant(*PQLATIN1STRING(1));
      Qt5xHb::returnNewObject(obj, true);
    }
    else if (ISQCHAR(1))
    {
      /*
      QVariant( QChar qchar )
      */
      QVariant *obj = new QVariant(*PQCHAR(1));
      Qt5xHb::returnNewObject(obj, true);
    }
    else if (ISQDATE(1))
    {
      /*
      QVariant( const QDate &date )
      */
      QVariant *obj = new QVariant(*PQDATE(1));
      Qt5xHb::returnNewObject(obj, true);
    }
    else if (ISQTIME(1))
    {
      /*
      QVariant( const QTime &time )
      */
      QVariant *obj = new QVariant(*PQTIME(1));
      Qt5xHb::returnNewObject(obj, true);
    }
    else if (ISQDATETIME(1))
    {
      /*
      QVariant( const QDateTime &datetime )
      */
      QVariant *obj = new QVariant(*PQDATETIME(1));
      Qt5xHb::returnNewObject(obj, true);
    }
    else if (ISQSIZE(1))
    {
      /*
      QVariant(const QSize &size)
      */
#ifndef QT_NO_GEOM_VARIANT
      QVariant *obj = new QVariant(*PQSIZE(1));
      Qt5xHb::returnNewObject(obj, true);
#endif
    }
    else if (ISQSIZEF(1))
    {
      /*
      QVariant(const QSizeF &size)
      */
#ifndef QT_NO_GEOM_VARIANT
      QVariant *obj = new QVariant(*PQSIZEF(1));
      Qt5xHb::returnNewObject(obj, true);
#endif
    }
    else if (ISQPOINT(1))
    {
      /*
      QVariant(const QPoint &pt)
      */
#ifndef QT_NO_GEOM_VARIANT
      QVariant *obj = new QVariant(*PQPOINT(1));
      Qt5xHb::returnNewObject(obj, true);
#endif
    }
    else if (ISQPOINTF(1))
    {
      /*
      QVariant(const QPointF &pt)
      */
#ifndef QT_NO_GEOM_VARIANT
      QVariant *obj = new QVariant(*PQPOINTF(1));
      Qt5xHb::returnNewObject(obj, true);
#endif
    }
    else if (ISQLINE(1))
    {
      /*
      QVariant(const QLine &line)
      */
#ifndef QT_NO_GEOM_VARIANT
      QVariant *obj = new QVariant(*PQLINE(1));
      Qt5xHb::returnNewObject(obj, true);
#endif
    }
    else if (ISQLINEF(1))
    {
      /*
      QVariant(const QLineF &line)
      */
#ifndef QT_NO_GEOM_VARIANT
      QVariant *obj = new QVariant(*PQLINEF(1));
      Qt5xHb::returnNewObject(obj, true);
#endif
    }
    else if (ISQRECT(1))
    {
      /*
      QVariant(const QRect &rect)
      */
#ifndef QT_NO_GEOM_VARIANT
      QVariant *obj = new QVariant(*PQRECT(1));
      Qt5xHb::returnNewObject(obj, true);
#endif
    }
    else if (ISQRECTF(1))
    {
      /*
      QVariant(const QRectF &rect)
      */
#ifndef QT_NO_GEOM_VARIANT
      QVariant *obj = new QVariant(*PQRECTF(1));
      Qt5xHb::returnNewObject(obj, true);
#endif
    }
    else if (ISQLOCALE(1))
    {
      /*
      QVariant( const QLocale &locale )
      */
      QVariant *obj = new QVariant(*PQLOCALE(1));
      Qt5xHb::returnNewObject(obj, true);
    }
    else if (ISQREGEXP(1))
    {
      /*
      QVariant(const QRegExp &regExp)
      */
#ifndef QT_NO_REGEXP
      QVariant *obj = new QVariant(*PQREGEXP(1));
      Qt5xHb::returnNewObject(obj, true);
#endif
    }
    else if (ISQREGULAREXPRESSION(1))
    {
      /*
      QVariant(const QRegularExpression &re)
      */
#ifndef QT_NO_REGULAREXPRESSION
      QVariant *obj = new QVariant(*PQREGULAREXPRESSION(1));
      Qt5xHb::returnNewObject(obj, true);
#endif
    }
    else if (ISQURL(1))
    {
      /*
      QVariant( const QUrl &url )
      */
      QVariant *obj = new QVariant(*PQURL(1));
      Qt5xHb::returnNewObject(obj, true);
    }
    else if (ISQEASINGCURVE(1))
    {
      /*
      QVariant( const QEasingCurve &easing )
      */
      QVariant *obj = new QVariant(*PQEASINGCURVE(1));
      Qt5xHb::returnNewObject(obj, true);
    }
    else if (ISQUUID(1))
    {
      /*
      QVariant( const QUuid &uuid )
      */
      QVariant *obj = new QVariant(*PQUUID(1));
      Qt5xHb::returnNewObject(obj, true);
    }
    else if (ISQMODELINDEX(1))
    {
      /*
      QVariant( const QModelIndex &modelIndex )
      */
      QVariant *obj = new QVariant(*PQMODELINDEX(1));
      Qt5xHb::returnNewObject(obj, true);
    }
    else if (ISQJSONVALUE(1))
    {
      /*
      QVariant( const QJsonValue &jsonValue )
      */
      QVariant *obj = new QVariant(*PQJSONVALUE(1));
      Qt5xHb::returnNewObject(obj, true);
    }
    else if (ISQJSONOBJECT(1))
    {
      /*
      QVariant( const QJsonObject &jsonObject )
      */
      QVariant *obj = new QVariant(*PQJSONOBJECT(1));
      Qt5xHb::returnNewObject(obj, true);
    }
    else if (ISQJSONARRAY(1))
    {
      /*
      QVariant( const QJsonArray &jsonArray )
      */
      QVariant *obj = new QVariant(*PQJSONARRAY(1));
      Qt5xHb::returnNewObject(obj, true);
    }
    else if (ISQJSONDOCUMENT(1))
    {
      /*
      QVariant( const QJsonDocument &jsonDocument )
      */
      QVariant *obj = new QVariant(*PQJSONDOCUMENT(1));
      Qt5xHb::returnNewObject(obj, true);
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
  }
  else if (ISNUMPAR(1) && HB_ISNUM(1))
  {
    if (hb_param(1, HB_IT_DOUBLE) != NULL)
    {
      HB_FUNC_EXEC(QVARIANT_NEW12);
    }
    else if (hb_param(1, HB_IT_LONG) != NULL)
    {
      HB_FUNC_EXEC(QVARIANT_NEW9);
    }
    else
    {
      HB_FUNC_EXEC(QVARIANT_NEW7);
    }
  }
  else if (ISNUMPAR(1) && HB_ISLOG(1))
  {
    /*
    QVariant( bool b )
    */
    QVariant *obj = new QVariant(PBOOL(1));
    Qt5xHb::returnNewObject(obj, true);
  }
  else if (ISNUMPAR(1) && HB_ISCHAR(1))
  {
    HB_FUNC_EXEC(QVARIANT_NEW17);
  }
  else if (ISNUMPAR(1) && HB_ISARRAY(1))
  {
    HB_FUNC_EXEC(QVARIANT_NEW19);
  }
  else if (ISNUMPAR(2) && HB_ISNUM(1) && HB_ISPOINTER(2))
  {
    /*
    QVariant( int typeId, const void * copy )
    */
    QVariant *obj = new QVariant(PINT(1), (const void *)hb_parptr(2));
    Qt5xHb::returnNewObject(obj, true);
  }
  else if (ISNUMPAR(3) && HB_ISNUM(1) && HB_ISPOINTER(2) && HB_ISNUM(3))
  {
    /*
    QVariant( int typeId, const void * copy, uint flags )
    */
    QVariant *obj = new QVariant(PINT(1), (const void *)hb_parptr(2), PUINT(3));
    Qt5xHb::returnNewObject(obj, true);
  }
  else if (ISNUMPAR(1) && hb_param(1, HB_IT_DATE) != NULL)
  {
    int y, m, d;
    hb_dateDecode(hb_itemGetDL(hb_param(1, HB_IT_DATE)), &y, &m, &d);
    QDate date(y, m, d);
    QVariant *o = new QVariant(date);
    Qt5xHb::returnNewObject(o, true);
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

HB_FUNC_STATIC(QVARIANT_DELETE)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
    delete obj;
    obj = NULL;
    PHB_ITEM ptr = hb_itemPutPtr(NULL, NULL);
    hb_objSendMsg(hb_stackSelfItem(), "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
void swap( QVariant &other )
*/
HB_FUNC_STATIC(QVARIANT_SWAP)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQVARIANT(1))
    {
#endif
      obj->swap(*PQVARIANT(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
QVariant::Type type() const
*/
HB_FUNC_STATIC(QVARIANT_TYPE)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RENUM(obj->type());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
int userType() const
*/
HB_FUNC_STATIC(QVARIANT_USERTYPE)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RINT(obj->userType());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
const char * typeName() const
*/
HB_FUNC_STATIC(QVARIANT_TYPENAME)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      hb_retc(obj->typeName());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
bool canConvert( int targetTypeId ) const
*/
HB_FUNC_STATIC(QVARIANT_CANCONVERT)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      RBOOL(obj->canConvert(PINT(1)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
bool convert( int targetTypeId )
*/
HB_FUNC_STATIC(QVARIANT_CONVERT)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      RBOOL(obj->convert(PINT(1)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
bool isValid() const
*/
HB_FUNC_STATIC(QVARIANT_ISVALID)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RBOOL(obj->isValid());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
bool isNull() const
*/
HB_FUNC_STATIC(QVARIANT_ISNULL)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RBOOL(obj->isNull());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void clear()
*/
HB_FUNC_STATIC(QVARIANT_CLEAR)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      obj->clear();
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
void detach()
*/
HB_FUNC_STATIC(QVARIANT_DETACH)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      obj->detach();
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
}

/*
bool isDetached() const
*/
HB_FUNC_STATIC(QVARIANT_ISDETACHED)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RBOOL(obj->isDetached());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
int toInt( bool * ok = 0 ) const
*/
HB_FUNC_STATIC(QVARIANT_TOINT)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(0, 1) && (HB_ISLOG(1) || HB_ISNIL(1)))
    {
#endif
      bool par1;
      RINT(obj->toInt(&par1));
      hb_storl(par1, 1);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
uint toUInt( bool * ok = 0 ) const
*/
HB_FUNC_STATIC(QVARIANT_TOUINT)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(0, 1) && (HB_ISLOG(1) || HB_ISNIL(1)))
    {
#endif
      bool par1;
      RUINT(obj->toUInt(&par1));
      hb_storl(par1, 1);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
qlonglong toLongLong( bool * ok = 0 ) const
*/
HB_FUNC_STATIC(QVARIANT_TOLONGLONG)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(0, 1) && (HB_ISLOG(1) || HB_ISNIL(1)))
    {
#endif
      bool par1;
      RQLONGLONG(obj->toLongLong(&par1));
      hb_storl(par1, 1);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
qulonglong toULongLong( bool * ok = 0 ) const
*/
HB_FUNC_STATIC(QVARIANT_TOULONGLONG)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(0, 1) && (HB_ISLOG(1) || HB_ISNIL(1)))
    {
#endif
      bool par1;
      RQULONGLONG(obj->toULongLong(&par1));
      hb_storl(par1, 1);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
bool toBool() const
*/
HB_FUNC_STATIC(QVARIANT_TOBOOL)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RBOOL(obj->toBool());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
double toDouble( bool * ok = 0 ) const
*/
HB_FUNC_STATIC(QVARIANT_TODOUBLE)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(0, 1) && (HB_ISLOG(1) || HB_ISNIL(1)))
    {
#endif
      bool par1;
      RDOUBLE(obj->toDouble(&par1));
      hb_storl(par1, 1);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
float toFloat( bool * ok = 0 ) const
*/
HB_FUNC_STATIC(QVARIANT_TOFLOAT)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(0, 1) && (HB_ISLOG(1) || HB_ISNIL(1)))
    {
#endif
      bool par1;
      RFLOAT(obj->toFloat(&par1));
      hb_storl(par1, 1);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
qreal toReal( bool * ok = 0 ) const
*/
HB_FUNC_STATIC(QVARIANT_TOREAL)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(0, 1) && (HB_ISLOG(1) || HB_ISNIL(1)))
    {
#endif
      bool par1;
      RQREAL(obj->toReal(&par1));
      hb_storl(par1, 1);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QByteArray toByteArray() const
*/
HB_FUNC_STATIC(QVARIANT_TOBYTEARRAY)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QByteArray *ptr = new QByteArray(obj->toByteArray());
      Qt5xHb::createReturnClass(ptr, "QBYTEARRAY", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QBitArray toBitArray() const
*/
HB_FUNC_STATIC(QVARIANT_TOBITARRAY)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QBitArray *ptr = new QBitArray(obj->toBitArray());
      Qt5xHb::createReturnClass(ptr, "QBITARRAY", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QString toString() const
*/
HB_FUNC_STATIC(QVARIANT_TOSTRING)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RQSTRING(obj->toString());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QStringList toStringList() const
*/
HB_FUNC_STATIC(QVARIANT_TOSTRINGLIST)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RQSTRINGLIST(obj->toStringList());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QChar toChar() const
*/
HB_FUNC_STATIC(QVARIANT_TOCHAR)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QChar *ptr = new QChar(obj->toChar());
      Qt5xHb::createReturnClass(ptr, "QCHAR", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QDate toDate() const
*/
HB_FUNC_STATIC(QVARIANT_TODATE)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QDate *ptr = new QDate(obj->toDate());
      Qt5xHb::createReturnClass(ptr, "QDATE", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QTime toTime() const
*/
HB_FUNC_STATIC(QVARIANT_TOTIME)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QTime *ptr = new QTime(obj->toTime());
      Qt5xHb::createReturnClass(ptr, "QTIME", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QDateTime toDateTime() const
*/
HB_FUNC_STATIC(QVARIANT_TODATETIME)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QDateTime *ptr = new QDateTime(obj->toDateTime());
      Qt5xHb::createReturnClass(ptr, "QDATETIME", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QList<QVariant> toList() const
*/
HB_FUNC_STATIC(QVARIANT_TOLIST)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      Qt5xHb::convert_qvariantlist_to_array(obj->toList());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QPoint toPoint() const
*/
HB_FUNC_STATIC(QVARIANT_TOPOINT)
{
#ifndef QT_NO_GEOM_VARIANT
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QPoint *ptr = new QPoint(obj->toPoint());
      Qt5xHb::createReturnClass(ptr, "QPOINT", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
QPointF toPointF() const
*/
HB_FUNC_STATIC(QVARIANT_TOPOINTF)
{
#ifndef QT_NO_GEOM_VARIANT
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QPointF *ptr = new QPointF(obj->toPointF());
      Qt5xHb::createReturnClass(ptr, "QPOINTF", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
QRect toRect() const
*/
HB_FUNC_STATIC(QVARIANT_TORECT)
{
#ifndef QT_NO_GEOM_VARIANT
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QRect *ptr = new QRect(obj->toRect());
      Qt5xHb::createReturnClass(ptr, "QRECT", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
QRectF toRectF() const
*/
HB_FUNC_STATIC(QVARIANT_TORECTF)
{
#ifndef QT_NO_GEOM_VARIANT
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QRectF *ptr = new QRectF(obj->toRectF());
      Qt5xHb::createReturnClass(ptr, "QRECTF", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
QSize toSize() const
*/
HB_FUNC_STATIC(QVARIANT_TOSIZE)
{
#ifndef QT_NO_GEOM_VARIANT
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QSize *ptr = new QSize(obj->toSize());
      Qt5xHb::createReturnClass(ptr, "QSIZE", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
QSizeF toSizeF() const
*/
HB_FUNC_STATIC(QVARIANT_TOSIZEF)
{
#ifndef QT_NO_GEOM_VARIANT
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QSizeF *ptr = new QSizeF(obj->toSizeF());
      Qt5xHb::createReturnClass(ptr, "QSIZEF", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
QLine toLine() const
*/
HB_FUNC_STATIC(QVARIANT_TOLINE)
{
#ifndef QT_NO_GEOM_VARIANT
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QLine *ptr = new QLine(obj->toLine());
      Qt5xHb::createReturnClass(ptr, "QLINE", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
QLineF toLineF() const
*/
HB_FUNC_STATIC(QVARIANT_TOLINEF)
{
#ifndef QT_NO_GEOM_VARIANT
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QLineF *ptr = new QLineF(obj->toLineF());
      Qt5xHb::createReturnClass(ptr, "QLINEF", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
QLocale toLocale() const
*/
HB_FUNC_STATIC(QVARIANT_TOLOCALE)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QLocale *ptr = new QLocale(obj->toLocale());
      Qt5xHb::createReturnClass(ptr, "QLOCALE", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QRegExp toRegExp() const
*/
HB_FUNC_STATIC(QVARIANT_TOREGEXP)
{
#ifndef QT_NO_REGEXP
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QRegExp *ptr = new QRegExp(obj->toRegExp());
      Qt5xHb::createReturnClass(ptr, "QREGEXP", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
QRegularExpression toRegularExpression() const
*/
HB_FUNC_STATIC(QVARIANT_TOREGULAREXPRESSION)
{
#ifndef QT_NO_REGULAREXPRESSION
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QRegularExpression *ptr = new QRegularExpression(obj->toRegularExpression());
      Qt5xHb::createReturnClass(ptr, "QREGULAREXPRESSION", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
QUrl toUrl() const
*/
HB_FUNC_STATIC(QVARIANT_TOURL)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QUrl *ptr = new QUrl(obj->toUrl());
      Qt5xHb::createReturnClass(ptr, "QURL", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QEasingCurve toEasingCurve() const
*/
HB_FUNC_STATIC(QVARIANT_TOEASINGCURVE)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QEasingCurve *ptr = new QEasingCurve(obj->toEasingCurve());
      Qt5xHb::createReturnClass(ptr, "QEASINGCURVE", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QUuid toUuid() const
*/
HB_FUNC_STATIC(QVARIANT_TOUUID)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QUuid *ptr = new QUuid(obj->toUuid());
      Qt5xHb::createReturnClass(ptr, "QUUID", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QModelIndex toModelIndex() const
*/
HB_FUNC_STATIC(QVARIANT_TOMODELINDEX)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QModelIndex *ptr = new QModelIndex(obj->toModelIndex());
      Qt5xHb::createReturnClass(ptr, "QMODELINDEX", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QJsonValue toJsonValue() const
*/
HB_FUNC_STATIC(QVARIANT_TOJSONVALUE)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QJsonValue *ptr = new QJsonValue(obj->toJsonValue());
      Qt5xHb::createReturnClass(ptr, "QJSONVALUE", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QJsonObject toJsonObject() const
*/
HB_FUNC_STATIC(QVARIANT_TOJSONOBJECT)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QJsonObject *ptr = new QJsonObject(obj->toJsonObject());
      Qt5xHb::createReturnClass(ptr, "QJSONOBJECT", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QJsonArray toJsonArray() const
*/
HB_FUNC_STATIC(QVARIANT_TOJSONARRAY)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QJsonArray *ptr = new QJsonArray(obj->toJsonArray());
      Qt5xHb::createReturnClass(ptr, "QJSONARRAY", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
QJsonDocument toJsonDocument() const
*/
HB_FUNC_STATIC(QVARIANT_TOJSONDOCUMENT)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QJsonDocument *ptr = new QJsonDocument(obj->toJsonDocument());
      Qt5xHb::createReturnClass(ptr, "QJSONDOCUMENT", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
void load(QDataStream &ds)
*/
HB_FUNC_STATIC(QVARIANT_LOAD)
{
#ifndef QT_NO_DATASTREAM
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQDATASTREAM(1))
    {
#endif
      obj->load(*PQDATASTREAM(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
void save(QDataStream &ds) const
*/
HB_FUNC_STATIC(QVARIANT_SAVE)
{
#ifndef QT_NO_DATASTREAM
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQDATASTREAM(1))
    {
#endif
      obj->save(*PQDATASTREAM(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
void * data()
*/
HB_FUNC_STATIC(QVARIANT_DATA)
{
  QVariant *obj = (QVariant *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL)
  {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      hb_retptr((void *)obj->data());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    }
    else
    {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
}

/*
static const char * typeToName( int typeId )
*/
HB_FUNC_STATIC(QVARIANT_TYPETONAME)
{
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
  if (ISNUMPAR(1) && HB_ISNUM(1))
  {
#endif
    hb_retc(QVariant::typeToName(PINT(1)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
#endif
}

/*
static QVariant::Type nameToType( const char * name )
*/
HB_FUNC_STATIC(QVARIANT_NAMETOTYPE)
{
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
  if (ISNUMPAR(1) && HB_ISCHAR(1))
  {
#endif
    RENUM(QVariant::nameToType(PCONSTCHAR(1)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
#endif
}

HB_FUNC_STATIC(QVARIANT_NEWFROM)
{
  PHB_ITEM self = hb_stackSelfItem();

  if (hb_pcount() == 1 && HB_ISOBJECT(1))
  {
    PHB_ITEM ptr = hb_itemPutPtr(NULL, hb_itemGetPtr(hb_objSendMsg(hb_param(1, HB_IT_OBJECT), "POINTER", 0)));
    hb_objSendMsg(self, "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
    PHB_ITEM des = hb_itemPutL(NULL, false);
    hb_objSendMsg(self, "_SELF_DESTRUCTION", 1, des);
    hb_itemRelease(des);
  }
  else if (hb_pcount() == 1 && HB_ISPOINTER(1))
  {
    PHB_ITEM ptr = hb_itemPutPtr(NULL, hb_itemGetPtr(hb_param(1, HB_IT_POINTER)));
    hb_objSendMsg(self, "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
    PHB_ITEM des = hb_itemPutL(NULL, false);
    hb_objSendMsg(self, "_SELF_DESTRUCTION", 1, des);
    hb_itemRelease(des);
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }

  hb_itemReturn(self);
}

HB_FUNC_STATIC(QVARIANT_NEWFROMOBJECT)
{
  HB_FUNC_EXEC(QVARIANT_NEWFROM);
}

HB_FUNC_STATIC(QVARIANT_NEWFROMPOINTER)
{
  HB_FUNC_EXEC(QVARIANT_NEWFROM);
}

HB_FUNC_STATIC(QVARIANT_SELFDESTRUCTION)
{
  hb_retl(hb_itemGetL(hb_objSendMsg(hb_stackSelfItem(), "SELF_DESTRUCTION", 0)));
}

HB_FUNC_STATIC(QVARIANT_SETSELFDESTRUCTION)
{
  PHB_ITEM self = hb_stackSelfItem();

  if (hb_pcount() == 1 && HB_ISLOG(1))
  {
    PHB_ITEM des = hb_itemPutL(NULL, hb_parl(1));
    hb_objSendMsg(self, "_SELF_DESTRUCTION", 1, des);
    hb_itemRelease(des);
  }
  else
  {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }

  hb_itemReturn(self);
}

#pragma ENDDUMP
