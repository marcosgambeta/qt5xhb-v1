//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

// clang-format off

#include <hbclass.ch>

#ifndef QT5XHB_NO_REQUESTS
REQUEST QWINDOW
REQUEST QWINTHUMBNAILTOOLBUTTON
#endif

CLASS QWinThumbnailToolBar INHERIT QObject

   METHOD new
   METHOD delete
   METHOD window
   METHOD setWindow
   METHOD addButton
   METHOD removeButton
   METHOD setButtons
   METHOD buttons
   METHOD count
   METHOD clear

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QWinThumbnailToolBar
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

// clang-format on

#pragma BEGINDUMP

#include <QtCore/Qt>

#ifndef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
#include <QtWinExtras/QWinThumbnailToolBar>
#endif
#endif

#include "qt5xhb_common.hpp"
#include "qt5xhb_macros.hpp"
#include "qt5xhb_utils.hpp"
#include "qt5xhb_events.hpp"
#include "qt5xhb_signals.hpp"

#ifdef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
#include <QtWinExtras/QWinThumbnailToolBar>
#endif
#endif

#include <QtGui/QWindow>

    /*
    QWinThumbnailToolBar( QObject * parent = 0 )
    */
HB_FUNC_STATIC(QWINTHUMBNAILTOOLBAR_NEW)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  if (ISBETWEEN(0, 1) && ISQOBJECTORNIL(1))
  {
    QWinThumbnailToolBar *obj = new QWinThumbnailToolBar(OPQOBJECT(1, 0));
    Qt5xHb::returnNewObject(obj, false);
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
#endif
}

HB_FUNC_STATIC(QWINTHUMBNAILTOOLBAR_DELETE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QWinThumbnailToolBar *obj = (QWinThumbnailToolBar *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
    Qt5xHb::Events_disconnect_all_events(obj, true);
    Qt5xHb::Signals_disconnect_all_signals(obj, true);
    delete obj;
    obj = NULL;
    PHB_ITEM ptr = hb_itemPutPtr(NULL, NULL);
    hb_objSendMsg(hb_stackSelfItem(), "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QWindow * window() const
*/
HB_FUNC_STATIC(QWINTHUMBNAILTOOLBAR_WINDOW)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QWinThumbnailToolBar *obj = (QWinThumbnailToolBar *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QWindow *ptr = obj->window();
      Qt5xHb::createReturnQObjectClass(ptr, "QWINDOW");
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setWindow( QWindow * window )
*/
HB_FUNC_STATIC(QWINTHUMBNAILTOOLBAR_SETWINDOW)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QWinThumbnailToolBar *obj = (QWinThumbnailToolBar *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQWINDOW(1))
    {
#endif
      obj->setWindow(PQWINDOW(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
void addButton( QWinThumbnailToolButton * button )
*/
HB_FUNC_STATIC(QWINTHUMBNAILTOOLBAR_ADDBUTTON)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QWinThumbnailToolBar *obj = (QWinThumbnailToolBar *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQWINTHUMBNAILTOOLBUTTON(1))
    {
#endif
      obj->addButton(PQWINTHUMBNAILTOOLBUTTON(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
void removeButton( QWinThumbnailToolButton * button )
*/
HB_FUNC_STATIC(QWINTHUMBNAILTOOLBAR_REMOVEBUTTON)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QWinThumbnailToolBar *obj = (QWinThumbnailToolBar *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQWINTHUMBNAILTOOLBUTTON(1))
    {
#endif
      obj->removeButton(PQWINTHUMBNAILTOOLBUTTON(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
void setButtons( const QList<QWinThumbnailToolButton*> &buttons )
*/
HB_FUNC_STATIC(QWINTHUMBNAILTOOLBAR_SETBUTTONS)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QWinThumbnailToolBar *obj = (QWinThumbnailToolBar *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISARRAY(1))
    {
#endif
      QList<QWinThumbnailToolButton *> par1;
      PHB_ITEM aList1 = hb_param(1, HB_IT_ARRAY);
      int nLen1 = hb_arrayLen(aList1);
      for (int i1 = 0; i1 < nLen1; i1++)
      {
        par1 << (QWinThumbnailToolButton *)hb_itemGetPtr(
            hb_objSendMsg(hb_arrayGetItemPtr(aList1, i1 + 1), "POINTER", 0));
      }
      obj->setButtons(par1);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QList<QWinThumbnailToolButton*> buttons() const
*/
HB_FUNC_STATIC(QWINTHUMBNAILTOOLBAR_BUTTONS)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QWinThumbnailToolBar *obj = (QWinThumbnailToolBar *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QList<QWinThumbnailToolButton *> list = obj->buttons();
      PHB_DYNS pDynSym = hb_dynsymFindName("QWINTHUMBNAILTOOLBUTTON");
      PHB_ITEM pArray = hb_itemArrayNew(0);
      if (pDynSym != NULL)
      {
        for (int i = 0; i < list.count(); i++)
        {
          hb_vmPushDynSym(pDynSym);
          hb_vmPushNil();
          hb_vmDo(0);
          PHB_ITEM pObject = hb_itemNew(NULL);
          hb_itemCopy(pObject, hb_stackReturnItem());
          PHB_ITEM pItem = hb_itemPutPtr(NULL, list[i]);
          hb_objSendMsg(pObject, "_POINTER", 1, pItem);
          hb_itemRelease(pItem);
          hb_arrayAddForward(pArray, pObject);
          hb_itemRelease(pObject);
        }
      }
      else
      {
        hb_errRT_BASE(EG_NOFUNC, 1001, NULL, "QWINTHUMBNAILTOOLBUTTON", HB_ERR_ARGS_BASEPARAMS);
      }
      hb_itemReturnRelease(pArray);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
int count() const
*/
HB_FUNC_STATIC(QWINTHUMBNAILTOOLBAR_COUNT)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QWinThumbnailToolBar *obj = (QWinThumbnailToolBar *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RINT(obj->count());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void clear()
*/
HB_FUNC_STATIC(QWINTHUMBNAILTOOLBAR_CLEAR)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 2, 0))
  QWinThumbnailToolBar *obj = (QWinThumbnailToolBar *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      obj->clear();
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

#pragma ENDDUMP
