//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

// clang-format off

#include <hbclass.ch>

#ifndef QT5XHB_NO_REQUESTS
REQUEST QLOCALE
REQUEST QVOICE
#endif

CLASS QTextToSpeechEngine INHERIT QObject

   METHOD delete
   METHOD availableLocales
   METHOD availableVoices
   METHOD say
   METHOD stop
   METHOD pause
   METHOD resume
   METHOD rate
   METHOD setRate
   METHOD pitch
   METHOD setPitch
   METHOD locale
   METHOD setLocale
   METHOD volume
   METHOD setVolume
   METHOD voice
   METHOD setVoice
   METHOD state

   METHOD onStateChanged

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QTextToSpeechEngine
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

// clang-format on

#pragma BEGINDUMP

#include <QtCore/Qt>

#ifndef __XHARBOUR__
#include <QtTextToSpeech/QTextToSpeechEngine>
#endif

#include "qt5xhb_common.hpp"
#include "qt5xhb_macros.hpp"
#include "qt5xhb_utils.hpp"
#include "qt5xhb_events.hpp"
#include "qt5xhb_signals.hpp"

#ifdef __XHARBOUR__
#include <QtTextToSpeech/QTextToSpeechEngine>
#endif

#include <QtCore/QVector>
#include <QtCore/QLocale>
#include <QtTextToSpeech/QVoice>

    /*
    ~QTextToSpeechEngine()
    */
HB_FUNC_STATIC(QTEXTTOSPEECHENGINE_DELETE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
  QTextToSpeechEngine *obj = (QTextToSpeechEngine *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
    Qt5xHb::Events_disconnect_all_events(obj, true);
    Qt5xHb::Signals_disconnect_all_signals(obj, true);
    delete obj;
    obj = NULL;
    PHB_ITEM ptr = hb_itemPutPtr(NULL, NULL);
    hb_objSendMsg(hb_stackSelfItem(), "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
virtual QVector<QLocale> availableLocales() const = 0
*/
HB_FUNC_STATIC(QTEXTTOSPEECHENGINE_AVAILABLELOCALES)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
  QTextToSpeechEngine *obj = (QTextToSpeechEngine *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QVector<QLocale> list = obj->availableLocales();
      PHB_DYNS pDynSym = hb_dynsymFindName("QLOCALE");
      PHB_ITEM pArray = hb_itemArrayNew(0);
      if (pDynSym != NULL)
      {
        for (int i = 0; i < list.count(); i++)
        {
          hb_vmPushDynSym(pDynSym);
          hb_vmPushNil();
          hb_vmDo(0);
          PHB_ITEM pObject = hb_itemNew(NULL);
          hb_itemCopy(pObject, hb_stackReturnItem());
          PHB_ITEM pItem = hb_itemPutPtr(NULL, new QLocale(list[i]));
          hb_objSendMsg(pObject, "_POINTER", 1, pItem);
          hb_itemRelease(pItem);
          PHB_ITEM pDestroy = hb_itemPutL(NULL, true);
          hb_objSendMsg(pObject, "_SELF_DESTRUCTION", 1, pDestroy);
          hb_itemRelease(pDestroy);
          hb_arrayAddForward(pArray, pObject);
          hb_itemRelease(pObject);
        }
      }
      else
      {
        hb_errRT_BASE(EG_NOFUNC, 1001, NULL, "QLOCALE", HB_ERR_ARGS_BASEPARAMS);
      }
      hb_itemReturnRelease(pArray);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
virtual QVector<QVoice> availableVoices() const = 0
*/
HB_FUNC_STATIC(QTEXTTOSPEECHENGINE_AVAILABLEVOICES)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
  QTextToSpeechEngine *obj = (QTextToSpeechEngine *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QVector<QVoice> list = obj->availableVoices();
      PHB_DYNS pDynSym = hb_dynsymFindName("QVOICE");
      PHB_ITEM pArray = hb_itemArrayNew(0);
      if (pDynSym != NULL)
      {
        for (int i = 0; i < list.count(); i++)
        {
          hb_vmPushDynSym(pDynSym);
          hb_vmPushNil();
          hb_vmDo(0);
          PHB_ITEM pObject = hb_itemNew(NULL);
          hb_itemCopy(pObject, hb_stackReturnItem());
          PHB_ITEM pItem = hb_itemPutPtr(NULL, new QVoice(list[i]));
          hb_objSendMsg(pObject, "_POINTER", 1, pItem);
          hb_itemRelease(pItem);
          PHB_ITEM pDestroy = hb_itemPutL(NULL, true);
          hb_objSendMsg(pObject, "_SELF_DESTRUCTION", 1, pDestroy);
          hb_itemRelease(pDestroy);
          hb_arrayAddForward(pArray, pObject);
          hb_itemRelease(pObject);
        }
      }
      else
      {
        hb_errRT_BASE(EG_NOFUNC, 1001, NULL, "QVOICE", HB_ERR_ARGS_BASEPARAMS);
      }
      hb_itemReturnRelease(pArray);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
virtual void say( const QString &text ) = 0
*/
HB_FUNC_STATIC(QTEXTTOSPEECHENGINE_SAY)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
  QTextToSpeechEngine *obj = (QTextToSpeechEngine *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISCHAR(1))
    {
#endif
      obj->say(PQSTRING(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
virtual void stop() = 0
*/
HB_FUNC_STATIC(QTEXTTOSPEECHENGINE_STOP)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
  QTextToSpeechEngine *obj = (QTextToSpeechEngine *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      obj->stop();
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
virtual void pause() = 0
*/
HB_FUNC_STATIC(QTEXTTOSPEECHENGINE_PAUSE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
  QTextToSpeechEngine *obj = (QTextToSpeechEngine *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      obj->pause();
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
virtual void resume() = 0
*/
HB_FUNC_STATIC(QTEXTTOSPEECHENGINE_RESUME)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
  QTextToSpeechEngine *obj = (QTextToSpeechEngine *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      obj->resume();
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
virtual double rate() const = 0
*/
HB_FUNC_STATIC(QTEXTTOSPEECHENGINE_RATE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
  QTextToSpeechEngine *obj = (QTextToSpeechEngine *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RDOUBLE(obj->rate());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
virtual bool setRate( double rate ) = 0
*/
HB_FUNC_STATIC(QTEXTTOSPEECHENGINE_SETRATE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
  QTextToSpeechEngine *obj = (QTextToSpeechEngine *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      RBOOL(obj->setRate(PDOUBLE(1)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
virtual double pitch() const = 0
*/
HB_FUNC_STATIC(QTEXTTOSPEECHENGINE_PITCH)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
  QTextToSpeechEngine *obj = (QTextToSpeechEngine *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RDOUBLE(obj->pitch());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
virtual bool setPitch( double pitch ) = 0
*/
HB_FUNC_STATIC(QTEXTTOSPEECHENGINE_SETPITCH)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
  QTextToSpeechEngine *obj = (QTextToSpeechEngine *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      RBOOL(obj->setPitch(PDOUBLE(1)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
virtual QLocale locale() const = 0
*/
HB_FUNC_STATIC(QTEXTTOSPEECHENGINE_LOCALE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
  QTextToSpeechEngine *obj = (QTextToSpeechEngine *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QLocale *ptr = new QLocale(obj->locale());
      Qt5xHb::createReturnClass(ptr, "QLOCALE", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
virtual bool setLocale( const QLocale &locale ) = 0
*/
HB_FUNC_STATIC(QTEXTTOSPEECHENGINE_SETLOCALE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
  QTextToSpeechEngine *obj = (QTextToSpeechEngine *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQLOCALE(1))
    {
#endif
      RBOOL(obj->setLocale(*PQLOCALE(1)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
virtual double volume() const = 0
*/
HB_FUNC_STATIC(QTEXTTOSPEECHENGINE_VOLUME)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
  QTextToSpeechEngine *obj = (QTextToSpeechEngine *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RDOUBLE(obj->volume());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
virtual bool setVolume( double volume ) = 0
*/
HB_FUNC_STATIC(QTEXTTOSPEECHENGINE_SETVOLUME)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
  QTextToSpeechEngine *obj = (QTextToSpeechEngine *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1))
    {
#endif
      RBOOL(obj->setVolume(PDOUBLE(1)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
virtual QVoice voice() const = 0
*/
HB_FUNC_STATIC(QTEXTTOSPEECHENGINE_VOICE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
  QTextToSpeechEngine *obj = (QTextToSpeechEngine *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      QVoice *ptr = new QVoice(obj->voice());
      Qt5xHb::createReturnClass(ptr, "QVOICE", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
virtual bool setVoice( const QVoice &voice ) = 0
*/
HB_FUNC_STATIC(QTEXTTOSPEECHENGINE_SETVOICE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
  QTextToSpeechEngine *obj = (QTextToSpeechEngine *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQVOICE(1))
    {
#endif
      RBOOL(obj->setVoice(*PQVOICE(1)));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
virtual QTextToSpeech::State state() const = 0
*/
HB_FUNC_STATIC(QTEXTTOSPEECHENGINE_STATE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
  QTextToSpeechEngine *obj = (QTextToSpeechEngine *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0))
    {
#endif
      RENUM(obj->state());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

void QTextToSpeechEngineSlots_connect_signal(const QString &signal, const QString &slot);

HB_FUNC_STATIC(QTEXTTOSPEECHENGINE_ONSTATECHANGED)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 10, 0))
  QTextToSpeechEngineSlots_connect_signal("stateChanged(QTextToSpeech::State)", "stateChanged(QTextToSpeech::State)");
#else
  hb_retl(false);
#endif
}

#pragma ENDDUMP
