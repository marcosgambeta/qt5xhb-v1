//
// Qt5xHb - Bindings libraries for Harbour/xHarbour and Qt Framework 5
//
// Copyright (c) 2025 Marcos Antonio Gambeta <marcosgambeta@outlook.com>
//

// DO NOT EDIT THIS FILE - the content was created using a source code generator

// clang-format off

#include <hbclass.ch>

#ifndef QT5XHB_NO_REQUESTS
REQUEST QABSTRACTAXIS
REQUEST QABSTRACTSERIES
REQUEST QBRUSH
REQUEST QEASINGCURVE
REQUEST QFONT
REQUEST QLEGEND
REQUEST QLOCALE
REQUEST QMARGINS
REQUEST QPEN
REQUEST QPOINTF
REQUEST QRECTF
#endif

CLASS QChart INHERIT QGraphicsWidget

   METHOD new
   METHOD delete
   METHOD theme
   METHOD setTheme
   METHOD title
   METHOD isBackgroundVisible
   METHOD setBackgroundVisible
   METHOD isDropShadowEnabled
   METHOD setDropShadowEnabled
   METHOD backgroundRoundness
   METHOD setBackgroundRoundness
   METHOD animationOptions
   METHOD setAnimationOptions
   METHOD animationDuration
   METHOD setAnimationDuration
   METHOD animationEasingCurve
   METHOD setAnimationEasingCurve
   METHOD margins
   METHOD setMargins
   METHOD plotArea
   METHOD isPlotAreaBackgroundVisible
   METHOD setPlotAreaBackgroundVisible
   METHOD localizeNumbers
   METHOD setLocalizeNumbers
   METHOD locale
   METHOD setLocale
   METHOD chartType
   METHOD addSeries
   METHOD removeSeries
   METHOD removeAllSeries
   METHOD series
   METHOD setAxisX
   METHOD setAxisY
   METHOD axisX
   METHOD axisY
   METHOD addAxis
   METHOD removeAxis
   METHOD axes
   METHOD createDefaultAxes
   METHOD setTitle
   METHOD setTitleFont
   METHOD titleFont
   METHOD setTitleBrush
   METHOD titleBrush
   METHOD setBackgroundBrush
   METHOD backgroundBrush
   METHOD setBackgroundPen
   METHOD backgroundPen
   METHOD zoomIn
   METHOD zoomOut
   METHOD zoom
   METHOD zoomReset
   METHOD isZoomed
   METHOD scroll
   METHOD legend
   METHOD setPlotAreaBackgroundBrush
   METHOD plotAreaBackgroundBrush
   METHOD setPlotAreaBackgroundPen
   METHOD plotAreaBackgroundPen
   METHOD mapToValue
   METHOD mapToPosition

   METHOD onPlotAreaChanged

   DESTRUCTOR destroyObject

END CLASS

PROCEDURE destroyObject() CLASS QChart
   IF ::self_destruction
      ::delete()
   ENDIF
RETURN

// clang-format on

#pragma BEGINDUMP

#include <QtCore/Qt>

#ifndef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
#include <QtCharts/QChart>
#endif
#endif

#include "qt5xhb_common.hpp"
#include "qt5xhb_macros.hpp"
#include "qt5xhb_utils.hpp"
#include "qt5xhb_events.hpp"
#include "qt5xhb_signals.hpp"

#ifdef __XHARBOUR__
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
#include <QtCharts/QChart>
#endif
#endif

#include <QtCore/QEasingCurve>
#include <QtCore/QLocale>

    using namespace QtCharts;

/*
QChart( QGraphicsItem * parent = nullptr, Qt::WindowFlags wFlags = Qt::WindowFlags() )
*/
HB_FUNC_STATIC(QCHART_NEW)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  if (ISBETWEEN(0, 2) && ISQGRAPHICSITEMORNIL(1) && ISNUMORNIL(2)) {
    QChart *obj = new QChart(HB_ISNIL(1) ? nullptr : (QGraphicsItem *)Qt5xHb::itemGetPtr(1),
                             HB_ISNIL(2) ? (Qt::WindowFlags)Qt::WindowFlags() : (Qt::WindowFlags)hb_parni(2));
    Qt5xHb::returnNewObject(obj, false);
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
#endif
}

/*
~QChart()
*/
HB_FUNC_STATIC(QCHART_DELETE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
    Qt5xHb::Events_disconnect_all_events(obj, true);
    Qt5xHb::Signals_disconnect_all_signals(obj, true);
    delete obj;
    obj = NULL;
    PHB_ITEM ptr = hb_itemPutPtr(NULL, NULL);
    hb_objSendMsg(hb_stackSelfItem(), "_POINTER", 1, ptr);
    hb_itemRelease(ptr);
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QChart::ChartTheme theme() const
*/
HB_FUNC_STATIC(QCHART_THEME)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RENUM(obj->theme());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setTheme( QChart::ChartTheme theme )
*/
HB_FUNC_STATIC(QCHART_SETTHEME)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1)) {
#endif
      obj->setTheme((QChart::ChartTheme)hb_parni(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QString title() const
*/
HB_FUNC_STATIC(QCHART_TITLE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RQSTRING(obj->title());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
bool isBackgroundVisible() const
*/
HB_FUNC_STATIC(QCHART_ISBACKGROUNDVISIBLE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->isBackgroundVisible());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setBackgroundVisible( bool visible = true )
*/
HB_FUNC_STATIC(QCHART_SETBACKGROUNDVISIBLE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(0, 1) && (HB_ISLOG(1) || HB_ISNIL(1))) {
#endif
      obj->setBackgroundVisible(OPBOOL(1, true));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
bool isDropShadowEnabled() const
*/
HB_FUNC_STATIC(QCHART_ISDROPSHADOWENABLED)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->isDropShadowEnabled());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setDropShadowEnabled( bool enabled = true )
*/
HB_FUNC_STATIC(QCHART_SETDROPSHADOWENABLED)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(0, 1) && (HB_ISLOG(1) || HB_ISNIL(1))) {
#endif
      obj->setDropShadowEnabled(OPBOOL(1, true));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
qreal backgroundRoundness() const
*/
HB_FUNC_STATIC(QCHART_BACKGROUNDROUNDNESS)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RQREAL(obj->backgroundRoundness());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setBackgroundRoundness( qreal diameter )
*/
HB_FUNC_STATIC(QCHART_SETBACKGROUNDROUNDNESS)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1)) {
#endif
      obj->setBackgroundRoundness(PQREAL(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QChart::AnimationOptions animationOptions() const
*/
HB_FUNC_STATIC(QCHART_ANIMATIONOPTIONS)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RENUM(obj->animationOptions());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setAnimationOptions( QChart::AnimationOptions options )
*/
HB_FUNC_STATIC(QCHART_SETANIMATIONOPTIONS)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1)) {
#endif
      obj->setAnimationOptions((QChart::AnimationOptions)hb_parni(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
int animationDuration() const
*/
HB_FUNC_STATIC(QCHART_ANIMATIONDURATION)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RINT(obj->animationDuration());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setAnimationDuration( int msecs )
*/
HB_FUNC_STATIC(QCHART_SETANIMATIONDURATION)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1)) {
#endif
      obj->setAnimationDuration(PINT(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QEasingCurve animationEasingCurve() const
*/
HB_FUNC_STATIC(QCHART_ANIMATIONEASINGCURVE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QEasingCurve *ptr = new QEasingCurve(obj->animationEasingCurve());
      Qt5xHb::createReturnClass(ptr, "QEASINGCURVE", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setAnimationEasingCurve( const QEasingCurve &curve )
*/
HB_FUNC_STATIC(QCHART_SETANIMATIONEASINGCURVE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQEASINGCURVE(1)) {
#endif
      obj->setAnimationEasingCurve(*PQEASINGCURVE(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QMargins margins() const
*/
HB_FUNC_STATIC(QCHART_MARGINS)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QMargins *ptr = new QMargins(obj->margins());
      Qt5xHb::createReturnClass(ptr, "QMARGINS", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setMargins( const QMargins &margins )
*/
HB_FUNC_STATIC(QCHART_SETMARGINS)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQMARGINS(1)) {
#endif
      obj->setMargins(*PQMARGINS(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QRectF plotArea() const
*/
HB_FUNC_STATIC(QCHART_PLOTAREA)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QRectF *ptr = new QRectF(obj->plotArea());
      Qt5xHb::createReturnClass(ptr, "QRECTF", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
bool isPlotAreaBackgroundVisible() const
*/
HB_FUNC_STATIC(QCHART_ISPLOTAREABACKGROUNDVISIBLE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->isPlotAreaBackgroundVisible());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setPlotAreaBackgroundVisible( bool visible = true )
*/
HB_FUNC_STATIC(QCHART_SETPLOTAREABACKGROUNDVISIBLE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(0, 1) && (HB_ISLOG(1) || HB_ISNIL(1))) {
#endif
      obj->setPlotAreaBackgroundVisible(OPBOOL(1, true));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
bool localizeNumbers() const
*/
HB_FUNC_STATIC(QCHART_LOCALIZENUMBERS)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->localizeNumbers());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setLocalizeNumbers( bool localize )
*/
HB_FUNC_STATIC(QCHART_SETLOCALIZENUMBERS)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISLOG(1)) {
#endif
      obj->setLocalizeNumbers(PBOOL(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QLocale locale() const
*/
HB_FUNC_STATIC(QCHART_LOCALE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QLocale *ptr = new QLocale(obj->locale());
      Qt5xHb::createReturnClass(ptr, "QLOCALE", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setLocale( const QLocale &locale )
*/
HB_FUNC_STATIC(QCHART_SETLOCALE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQLOCALE(1)) {
#endif
      obj->setLocale(*PQLOCALE(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QChart::ChartType chartType() const
*/
HB_FUNC_STATIC(QCHART_CHARTTYPE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RENUM(obj->chartType());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void addSeries( QAbstractSeries * series )
*/
HB_FUNC_STATIC(QCHART_ADDSERIES)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQABSTRACTSERIES(1)) {
#endif
      obj->addSeries(PQABSTRACTSERIES(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
void removeSeries( QAbstractSeries * series )
*/
HB_FUNC_STATIC(QCHART_REMOVESERIES)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQABSTRACTSERIES(1)) {
#endif
      obj->removeSeries(PQABSTRACTSERIES(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
void removeAllSeries()
*/
HB_FUNC_STATIC(QCHART_REMOVEALLSERIES)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      obj->removeAllSeries();
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QList<QAbstractSeries*> series() const
*/
HB_FUNC_STATIC(QCHART_SERIES)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QList<QAbstractSeries *> list = obj->series();
      PHB_DYNS pDynSym = hb_dynsymFindName("QABSTRACTSERIES");
      PHB_ITEM pArray = hb_itemArrayNew(0);
      if (pDynSym != NULL) {
        for (int i = 0; i < list.count(); i++) {
          hb_vmPushDynSym(pDynSym);
          hb_vmPushNil();
          hb_vmDo(0);
          PHB_ITEM pObject = hb_itemNew(NULL);
          hb_itemCopy(pObject, hb_stackReturnItem());
          PHB_ITEM pItem = hb_itemPutPtr(NULL, list[i]);
          hb_objSendMsg(pObject, "_POINTER", 1, pItem);
          hb_itemRelease(pItem);
          hb_arrayAddForward(pArray, pObject);
          hb_itemRelease(pObject);
        }
      } else {
        hb_errRT_BASE(EG_NOFUNC, 1001, NULL, "QABSTRACTSERIES", HB_ERR_ARGS_BASEPARAMS);
      }
      hb_itemReturnRelease(pArray);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setAxisX( QAbstractAxis * axis, QAbstractSeries * series = nullptr )
*/
HB_FUNC_STATIC(QCHART_SETAXISX)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(1, 2) && ISQABSTRACTAXIS(1) && ISQABSTRACTSERIESORNIL(2)) {
#endif
      obj->setAxisX(PQABSTRACTAXIS(1), OPQABSTRACTSERIES(2, nullptr));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
void setAxisY( QAbstractAxis * axis, QAbstractSeries * series = nullptr )
*/
HB_FUNC_STATIC(QCHART_SETAXISY)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(1, 2) && ISQABSTRACTAXIS(1) && ISQABSTRACTSERIESORNIL(2)) {
#endif
      obj->setAxisY(PQABSTRACTAXIS(1), OPQABSTRACTSERIES(2, nullptr));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QAbstractAxis * axisX( QAbstractSeries * series = nullptr ) const
*/
HB_FUNC_STATIC(QCHART_AXISX)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(0, 1) && ISQABSTRACTSERIESORNIL(1)) {
#endif
      QAbstractAxis *ptr = obj->axisX(OPQABSTRACTSERIES(1, nullptr));
      Qt5xHb::createReturnQObjectClass(ptr, "QABSTRACTAXIS");
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
QAbstractAxis * axisY( QAbstractSeries * series = nullptr ) const
*/
HB_FUNC_STATIC(QCHART_AXISY)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(0, 1) && ISQABSTRACTSERIESORNIL(1)) {
#endif
      QAbstractAxis *ptr = obj->axisY(OPQABSTRACTSERIES(1, nullptr));
      Qt5xHb::createReturnQObjectClass(ptr, "QABSTRACTAXIS");
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void addAxis( QAbstractAxis * axis, Qt::Alignment alignment )
*/
HB_FUNC_STATIC(QCHART_ADDAXIS)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(2) && ISQABSTRACTAXIS(1) && HB_ISNUM(2)) {
#endif
      obj->addAxis(PQABSTRACTAXIS(1), (Qt::Alignment)hb_parni(2));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
void removeAxis( QAbstractAxis * axis )
*/
HB_FUNC_STATIC(QCHART_REMOVEAXIS)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQABSTRACTAXIS(1)) {
#endif
      obj->removeAxis(PQABSTRACTAXIS(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QList<QAbstractAxis*> axes( Qt::Orientations orientation = Qt::Horizontal | Qt::Vertical, QAbstractSeries * series =
nullptr ) const
*/
HB_FUNC_STATIC(QCHART_AXES)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(0, 2) && ISNUMORNIL(1) && ISQABSTRACTSERIESORNIL(2)) {
#endif
      QList<QAbstractAxis *> list =
          obj->axes(HB_ISNIL(1) ? (Qt::Orientations)Qt::Horizontal | Qt::Vertical : (Qt::Orientations)hb_parni(1),
                    OPQABSTRACTSERIES(2, nullptr));
      PHB_DYNS pDynSym = hb_dynsymFindName("QABSTRACTAXIS");
      PHB_ITEM pArray = hb_itemArrayNew(0);
      if (pDynSym != NULL) {
        for (int i = 0; i < list.count(); i++) {
          hb_vmPushDynSym(pDynSym);
          hb_vmPushNil();
          hb_vmDo(0);
          PHB_ITEM pObject = hb_itemNew(NULL);
          hb_itemCopy(pObject, hb_stackReturnItem());
          PHB_ITEM pItem = hb_itemPutPtr(NULL, list[i]);
          hb_objSendMsg(pObject, "_POINTER", 1, pItem);
          hb_itemRelease(pItem);
          hb_arrayAddForward(pArray, pObject);
          hb_itemRelease(pObject);
        }
      } else {
        hb_errRT_BASE(EG_NOFUNC, 1001, NULL, "QABSTRACTAXIS", HB_ERR_ARGS_BASEPARAMS);
      }
      hb_itemReturnRelease(pArray);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void createDefaultAxes()
*/
HB_FUNC_STATIC(QCHART_CREATEDEFAULTAXES)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      obj->createDefaultAxes();
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
void setTitle( const QString &title )
*/
HB_FUNC_STATIC(QCHART_SETTITLE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISCHAR(1)) {
#endif
      obj->setTitle(PQSTRING(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
void setTitleFont( const QFont &font )
*/
HB_FUNC_STATIC(QCHART_SETTITLEFONT)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQFONT(1)) {
#endif
      obj->setTitleFont(*PQFONT(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QFont titleFont() const
*/
HB_FUNC_STATIC(QCHART_TITLEFONT)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QFont *ptr = new QFont(obj->titleFont());
      Qt5xHb::createReturnClass(ptr, "QFONT", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setTitleBrush( const QBrush &brush )
*/
HB_FUNC_STATIC(QCHART_SETTITLEBRUSH)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQBRUSH(1)) {
#endif
      obj->setTitleBrush(*PQBRUSH(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QBrush titleBrush() const
*/
HB_FUNC_STATIC(QCHART_TITLEBRUSH)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QBrush *ptr = new QBrush(obj->titleBrush());
      Qt5xHb::createReturnClass(ptr, "QBRUSH", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setBackgroundBrush( const QBrush &brush )
*/
HB_FUNC_STATIC(QCHART_SETBACKGROUNDBRUSH)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQBRUSH(1)) {
#endif
      obj->setBackgroundBrush(*PQBRUSH(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QBrush backgroundBrush() const
*/
HB_FUNC_STATIC(QCHART_BACKGROUNDBRUSH)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QBrush *ptr = new QBrush(obj->backgroundBrush());
      Qt5xHb::createReturnClass(ptr, "QBRUSH", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setBackgroundPen( const QPen &pen )
*/
HB_FUNC_STATIC(QCHART_SETBACKGROUNDPEN)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQPEN(1)) {
#endif
      obj->setBackgroundPen(*PQPEN(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QPen backgroundPen() const
*/
HB_FUNC_STATIC(QCHART_BACKGROUNDPEN)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QPen *ptr = new QPen(obj->backgroundPen());
      Qt5xHb::createReturnClass(ptr, "QPEN", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

HB_FUNC_STATIC(QCHART_ZOOMIN)
{
  if (ISNUMPAR(0)) {
    /*
    void zoomIn()
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
    QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

    if (obj != NULL) {
      obj->zoomIn();
    }

    hb_itemReturn(hb_stackSelfItem());
#endif
  } else if (ISNUMPAR(1) && ISQRECTF(1)) {
    /*
    void zoomIn( const QRectF &rect )
    */
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
    QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

    if (obj != NULL) {
      obj->zoomIn(*PQRECTF(1));
    }

    hb_itemReturn(hb_stackSelfItem());
#endif
  } else {
    hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
  }
}

/*
void zoomOut()
*/
HB_FUNC_STATIC(QCHART_ZOOMOUT)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      obj->zoomOut();
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
void zoom( qreal factor )
*/
HB_FUNC_STATIC(QCHART_ZOOM)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && HB_ISNUM(1)) {
#endif
      obj->zoom(PQREAL(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
void zoomReset()
*/
HB_FUNC_STATIC(QCHART_ZOOMRESET)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      obj->zoomReset();
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
bool isZoomed()
*/
HB_FUNC_STATIC(QCHART_ISZOOMED)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      RBOOL(obj->isZoomed());
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void scroll( qreal dx, qreal dy )
*/
HB_FUNC_STATIC(QCHART_SCROLL)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(2) && HB_ISNUM(1) && HB_ISNUM(2)) {
#endif
      obj->scroll(PQREAL(1), PQREAL(2));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QLegend * legend() const
*/
HB_FUNC_STATIC(QCHART_LEGEND)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QLegend *ptr = obj->legend();
      Qt5xHb::createReturnQObjectClass(ptr, "QLEGEND");
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setPlotAreaBackgroundBrush( const QBrush &brush )
*/
HB_FUNC_STATIC(QCHART_SETPLOTAREABACKGROUNDBRUSH)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQBRUSH(1)) {
#endif
      obj->setPlotAreaBackgroundBrush(*PQBRUSH(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QBrush plotAreaBackgroundBrush() const
*/
HB_FUNC_STATIC(QCHART_PLOTAREABACKGROUNDBRUSH)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QBrush *ptr = new QBrush(obj->plotAreaBackgroundBrush());
      Qt5xHb::createReturnClass(ptr, "QBRUSH", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
void setPlotAreaBackgroundPen( const QPen &pen )
*/
HB_FUNC_STATIC(QCHART_SETPLOTAREABACKGROUNDPEN)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(1) && ISQPEN(1)) {
#endif
      obj->setPlotAreaBackgroundPen(*PQPEN(1));
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }

  hb_itemReturn(hb_stackSelfItem());
#endif
}

/*
QPen plotAreaBackgroundPen() const
*/
HB_FUNC_STATIC(QCHART_PLOTAREABACKGROUNDPEN)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISNUMPAR(0)) {
#endif
      QPen *ptr = new QPen(obj->plotAreaBackgroundPen());
      Qt5xHb::createReturnClass(ptr, "QPEN", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
QPointF mapToValue( const QPointF &position, QAbstractSeries * series = nullptr )
*/
HB_FUNC_STATIC(QCHART_MAPTOVALUE)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(1, 2) && ISQPOINTF(1) && ISQABSTRACTSERIESORNIL(2)) {
#endif
      QPointF *ptr = new QPointF(obj->mapToValue(*PQPOINTF(1), OPQABSTRACTSERIES(2, nullptr)));
      Qt5xHb::createReturnClass(ptr, "QPOINTF", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

/*
QPointF mapToPosition( const QPointF &value, QAbstractSeries * series = nullptr )
*/
HB_FUNC_STATIC(QCHART_MAPTOPOSITION)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChart *obj = (QChart *)Qt5xHb::itemGetPtrStackSelfItem();

  if (obj != NULL) {
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    if (ISBETWEEN(1, 2) && ISQPOINTF(1) && ISQABSTRACTSERIESORNIL(2)) {
#endif
      QPointF *ptr = new QPointF(obj->mapToPosition(*PQPOINTF(1), OPQABSTRACTSERIES(2, nullptr)));
      Qt5xHb::createReturnClass(ptr, "QPOINTF", true);
#ifndef QT5XHB_DONT_CHECK_PARAMETERS
    } else {
      hb_errRT_BASE(EG_ARG, 3012, NULL, HB_ERR_FUNCNAME, HB_ERR_ARGS_BASEPARAMS);
    }
#endif
  }
#endif
}

void QChartSlots_connect_signal(const QString &signal, const QString &slot);

HB_FUNC_STATIC(QCHART_ONPLOTAREACHANGED)
{
#if (QT_VERSION >= QT_VERSION_CHECK(5, 7, 0))
  QChartSlots_connect_signal("plotAreaChanged(QRectF)", "plotAreaChanged(QRectF)");
#else
  hb_retl(false);
#endif
}

#pragma ENDDUMP
